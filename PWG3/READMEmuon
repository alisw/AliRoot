===================================================
  Code to include the muon information in the 
  creation of the standard AOD from the ESD
  Roberta ARNALDI, Enrico SCOMPARIN Torino
---------------------------------------------------------------

Code to copy the muon information from the ESD to the standard AOD. 

1) AnalysisTrainMuonLocal.C --> macro to run locally the AliAnalysisTaskESDMuonFilter. 
                                It creates a standard AOD from the ESD
2) AliAnalysisTaskESDMuonFilter.h  --> analysis task to copy the muon information from the ESD to the standard AOD
3) AliAnalysisTaskESDMuonFilter.cxx --> analysis task to copy the muon information from the ESD to the standard AOD
4) libPWG3muon.pkg
5) PWG3muonLinkDef.h 

===================================================
  Creation of the MUON-AOD from the standard AOD
  Roberta ARNALDI, Enrico SCOMPARIN Torino
---------------------------------------------------------------

Code to produce a muon-AOD, i.e. a replica of the standard AOD containing only events where 
at least one muon is present

1) AnalysisTrainFromStandardToMuonAODLocal.C --> macro to produce the MUON-AOD (it runs locally)
2) AliAnalysisTaskFromStandardToMuonAOD.h  --> analysis task to replicate the AOD content for interesting events
3) AliAnalysisTaskFromStandardToMuonAOD.cxx --> analysis task to replicate the AOD content for interesting events
4) libPWG3muon.pkg
5) PWG3muonLinkDef.h 

- The input files are the ESD (used only for tag creation) and the standard AOD.
  Tags files are created from all the ESD/AOD files placed in a directory,  
  given as an argument to the macro, and in its subdirectories.
- The selection of the muon events is based on the AOD tags.
- The contents of the MUON-AOD can be defined by the user in the AnalysisTrainFromStandardToMuonAODLocal.C
  macro with some settings as
  SetNeedsTracksBranchReplication(), SetNeedsVerticesBranchReplication() 
  (defined in STEER/AliAODHandler.h)...

===================================================
  Calculation of the LUT 
  Bogdan VULPESCU, Clermont
---------------------------------------------------------------
Analysis task for the calculation of the Look-up-Tables used by the MUON
trigger algorithm

Purpose: extract from ESD files track information (ESD track parameters and
matched local trigger decisions) and store in TNtuple; the ntuple is used
for building 2D histograms (transverse momentum / local deviation) which
afterwards enter calculation/optimization procedures for the selection of
LUT cuts for individual local boards and several transverse momenta.

This version is prepared for the use on the grid, see the JDL file.

Files:

AliAnalysisTaskLUT.cxx   - source files of the analysis task
AliAnalysisTaskLUT.h

rootlutnt.sh             - executable (script)

runCreateLUTNT.C         - macro for setting the libraries environment and
                           execution of the main macro

analysisTaskLUTNT.C      - main macro for the analysis

createLUTNT.jdl          - JDL file

===================================================
 Analysis task for the calculation of the trigger chamber efficiency.
 Diego STOCCO, Torino
----------------------------------------------------------------

Purpose: produce histograms for the trigger chamber efficiency determination 
from MUON track info. The task works either with input ESD or AOD (default is ESD).

This version works either locally or on grid.

Files:
AliAnalysisTaskTrigChEff.cxx   -source files of the analysis task
AliAnalysisTaskTrigChEff.h

AnalysisTrigChEff.C            - main macro for analysis

Test analysis:
- Preliminary: copy the following packages in the current working directory
  - STEERBase.par
  - ESD.par
  - AOD.par
  - ANALYSIS.par
  - ANALYSISalice.par
  - PWG3muon.par
If the packages are not present, create them: 
cd $ALICE_ROOT
make STEERBase.par
make ESD.par 
...

  - Local test:
  root
  .x AnalysisTrigChEff.C(kMlocal)

  by default the macro searches for ESD in $ALICE_ROOT/MUON/test_out.100
  The directory is generated by MUON/AlirootRun_MUONtest.sh (see README in MUON).

  - Grid test (interactive):
  root
  .x AnalysisTrigChEff.C(kMlocalGrid)

  by default the macro searches for a wn.xml in the current directory, with the list
  of grid files to analyse.

- Display results:
The macro creates the file MUON.TriggerEfficiencyMap.root
aliroot
AliMUONTriggerEfficiencyCells effCells("MUON.TriggerEfficiencyMap.root")
effCells.DisplayEfficiency()
