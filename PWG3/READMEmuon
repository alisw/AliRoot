===================================================
  Code to include the muon information in the 
  creation of the standard AOD from the ESD
  Roberta ARNALDI, Enrico SCOMPARIN Torino
---------------------------------------------------------------

The following filter is used in the official analysis train, in order to copy the muon information from the ESD to the standard AOD.

1) AliAnalysisTaskESDMuonFilter.h  --> analysis task to copy the muon information from the ESD to the standard AOD
2) AliAnalysisTaskESDMuonFilter.cxx --> analysis task to copy the muon information from the ESD to the standard AOD

In order to test locally the analysis train from the ESD to the Standard AOD production, the following macro is provided

1) AnalysisTrainMuonLocal.C 
   - The input file is the ESD
   - The outputs are the standard AOD and the AOD tag file
   
===================================================
  Creation of the MUON-AOD from the standard AOD
  Roberta ARNALDI, Enrico SCOMPARIN Torino
---------------------------------------------------------------

Code to produce a muon-AOD, i.e. a replica of the standard AOD containing only events where 
at least one muon in the dimuon spectrometer is present

1) AnalysisTrainFromStandardToMuonAODLocal.C --> macro to produce the MUON-AOD (it runs locally)
2) AliAnalysisTaskFromStandardToMuonAOD.h  --> analysis task to replicate the AOD content for interesting events
3) AliAnalysisTaskFromStandardToMuonAOD.cxx --> analysis task to replicate the AOD content for interesting events

- The input files are the standard AOD and the AOD tag file.
  The AOD tag file can be created in the previous step from ESD to Standard AOD, using AnalysisTrainMuonLocal.C, or it can be
  produced on the fly with this macro.
- Events containing at least one muon in the muon spectrometer can be selected using the AOD tag files.
- The contents of the MUON-AOD can be defined by the user in the AnalysisTrainFromStandardToMuonAODLocal.C
  macro with some settings as
  SetNeedsTracksBranchReplication(), SetNeedsVerticesBranchReplication() 
  (defined in STEER/AliAODHandler.h)...

===================================================
  Calculation of the LUT 
  Bogdan VULPESCU, Clermont
---------------------------------------------------------------
Analysis task for the calculation of the Look-up-Tables used by the MUON
trigger algorithm

Purpose: extract from ESD files track information (ESD track parameters and
matched local trigger decisions) and store in TNtuple; the ntuple is used
for building 2D histograms (transverse momentum / local deviation) which
afterwards enter calculation/optimization procedures for the selection of
LUT cuts for individual local boards and several transverse momenta.

This version is prepared for the use on the grid, see the JDL file.

Files:

AliAnalysisTaskLUT.cxx   - source files of the analysis task
AliAnalysisTaskLUT.h

rootlutnt.sh             - executable (script)

runCreateLUTNT.C         - macro for setting the libraries environment and
                           execution of the main macro

analysisTaskLUTNT.C      - main macro for the analysis

createLUTNT.jdl          - JDL file

===================================================
 Analysis task for the calculation of the trigger chamber efficiency.
 Diego STOCCO, Torino
----------------------------------------------------------------

Purpose: produce histograms for the trigger chamber efficiency determination 
from MUON track info. The task works either with input ESD or AOD (default is ESD).

This version works either locally or on grid.

Files:
AliAnalysisTaskTrigChEff.cxx   -source files of the analysis task
AliAnalysisTaskTrigChEff.h

AnalysisTrigChEff.C            - main macro for analysis

Test analysis:
- Preliminary: copy the following packages in the current working directory
  - STEERBase.par
  - ESD.par
  - AOD.par
  - ANALYSIS.par
  - ANALYSISalice.par
  - PWG3muon.par
If the packages are not present, create them: 
cd $ALICE_ROOT
make STEERBase.par
make ESD.par 
...

  - Local test:
  root
  .x AnalysisTrigChEff.C(kMlocal)

  by default the macro searches for ESD in $ALICE_ROOT/MUON/test_out.100
  The directory is generated by MUON/AlirootRun_MUONtest.sh (see README in MUON).

  - Grid test (interactive):
  root
  .x AnalysisTrigChEff.C(kMlocalGrid)

  by default the macro searches for a wn.xml in the current directory, with the list
  of grid files to analyse.

- Display results:
The macro creates the file MUON.TriggerEfficiencyMap.root
aliroot
AliMUONTriggerEfficiencyCells effCells("MUON.TriggerEfficiencyMap.root")
effCells.DisplayEfficiency()

===================================================
 Analysis task for checking the consistency of ESD and AOD filling and contents.
 Mercedes LOPEZ NORIEGA, Orsay
----------------------------------------------------------------

Purpose:check the consistency between the ESDs and the AOD.

The task works locally and on the grid, there are two macros depending where
you want to run

Files:
AliAnalysisTaskAODvsESD.cxx   -source files of the analysis task
AliAnalysisTaskAODvsESD.h

AnalysisTrainMuonComp.C       - macro for analysis on the grid
AnalysisTrainMuonCompLocal.C  - macro for local analysis

To run the check:
1. Copy the following packages in the current working directory
  - STEERBase.par
  - ESD.par
  - AOD.par
  - ANALYSIS.par
  - ANALYSISalice.par
  - PWG3muon.par

2. To run locally:
  root
  .x AnalysisTrainMuonCompLocal.C

  by default the macro searches for a tag file of ESDs in the 
  working directory

3. To run on the grid:
  root
  .x AnalysisTrainMuonComp.C

  by default the macro searches for a wn.xml in the current directory, with the list
  of grid files to analyse.

4. Display results:
The macro creates the file AODvsESDoutput.root
It contains an Ntuple from the ESDs and Ntuple from the AODs and an inv. mass histo 
for each case

===================================================
 Analysis task for extracting variables from the ESD for single muons
 Nicole BASTID and Bogdan VULPESCU, Clermont-Ferrand
----------------------------------------------------------------

Purpose: the output is an ntuple with single muon tracks selected variables; a
histogram collects the number of events in different trigger classes.

Files:

AliAnalysisTaskSingleMuESD.cxx  - source files of the analysis task
AliAnalysisTaskSingleMuESD.h

RunSingleMuonAnalysisFromESD.C  - macro to run the analysis (with xml input
                                  collection and grid connection)


How to run:

1. Copy the following packages in the current working directory
  - STEERBase.par
  - ESD.par
  - AOD.par
  - ANALYSIS.par
  - ANALYSISalice.par
  - PWG3muon.par

2. Run root

gROOT->LoadMacro("$ALICE_ROOT/PWG3/muon/RunAnalysis.C");
setupPar("STEERBase"); 
setupPar("ESD"); 
setupPar("AOD"); 
setupPar("ANALYSIS"); 
setupPar("ANALYSISalice"); 
setupPar("PWG3muon");

3. To analyse grid files, provide an XML collection file wn.xml and run

gROOT->LoadMacro("$ALICE_ROOT/PWG3/muon/RunSingleMuonAnalysisFromESD.C");
RunSingleMuonAnalysisFromESD()

4. To analyse local files, modify RunSingleMuonAnalysisFromESD.C

  } else {
    chain->Add("/path_1_to/AliESDs.root");
    chain->Add("/path_2_to/AliESDs.root");
    chain->Add("/path_3_to/AliESDs.root");
  }

and run (notice the "1" argument)

gROOT->LoadMacro("$ALICE_ROOT/PWG3/muon/RunSingleMuonAnalysisFromESD.C");
RunSingleMuonAnalysisFromESD(1)

5. Check the results in SingleMuESD.root

Note: for some older runs (PDC08/LHC08t for instance) it is necessary to force 
the values of the trigger mask, because the function 

GetFiredTriggerClasses()

from AliESDEvent does not return the proper names of the muon trigger classes.
So one has to un-comment the line

task->SetTriggerType("MUON");

in the macro RunSingleMuonAnalysisFromESD.C, if the simulation was produced 
with SetMakeTrigger("MUON")

This bug is fixed starting with the TRUNK from 14.11.2008



