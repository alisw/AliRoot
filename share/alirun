#!/bin/sh
#############################################################################
# alirun - a shell script to run AliRoot
#############################################################################
#
# modification history
# $Log$
#
# SYNOPSIS
# alirun [[-d <TPC+ITS+..>|-all]]
#         [-f <hits file>]
#         [-o <output directory>]
#         [-split]
#         [-C <Config.C>]
#         [-p <particle#>]
#         [-seed <seed for random number generator>]
#         [-n <event #>]
#         <-c <command ...>>
#
# DESCRIPTION
# This script is a wrapper for AliRoot and provides a command line interface suitable for running in batch mode.
#
# CONFIGURATION OPTIONS
# The following options are used to configure AliRoot session.
# 
# -c <command1 command2 ...>
#    This option must be the last one on alirun command line and specifies the sequence of alirun commands to be executed. At present, the following commands are supported:
#
#     - Hits ................ simulation 
#     - Digits .............. digitisation
#     - SDigits ............. creation of sumable digits
#     - SDigits2Digits ...... conversion SDigits->Digits 
#
# -d <TPC+ITS+..> | -d all | -all 
#    Selects detector for which <command> will be run. If none of these options was specified, an internal loop in AliRoot over all active detectors is assumed.  Otherwise, for each detector, input file(s) are re-opened in update mode, command (or macro) is executed and the file is closed. Option -all is equivalent to MUON+RICH+TOF+ITS+TPC+PHOS+PMD+CASTOR+TRD. Detectors are processed in order as they appear on the command line.   
#
# -f <file>
#    Name of the top level Root file where Root trees will be stored (branches may reside in the same file or be diverted to separate files (see -split option). By default, file is named galice.root.
#
# -o <directory> 
#    A directory where output file(s) will be stored. If does not exist, it will be created. If not specified, current directory is used.
#
# -split
#    If specified, this option will tell AliRoot to divert branches of Root trees into separate files.
#
#    The layout of output directory is the following:
#    
#    <directory>
#     |-- Digits.<detector>.root
#     |-- SDigits.<detector>.root
#     |-- Hits.root
#     |-- Kine.root
#     |-- Reco.root
#     `-- galice.root
#
# -C <macro.C>
#    An alternative to Config.C macro which contains AliRoot configuration. 
#
# -p <n> 
#    Number of primary particles to be generated by selected event generator. Required for Hits command, Ignored by Digits command (digitisation is performed for all particles found in input file). Default value is 50. 
#   
# -seed <n> 
#    Seed for random number generator (used to initialise TRandom3(n)).  
#   
# -n <n>
#    Number of events to generate (not yet implemented).  
# 
# RUN OPTIONS
# These options define run time appearance of the AliRoot session.
#
# -help
#    Display usage.
#
# -verbose
#    Switch verbose screen output on. 
#
# -quiet
#    Switch verbose output off. Output is redirected to a file which is shown on standard output only if <command> returns non zero status.
# 
# -fork
#    Forks all digitisation processes in background, using LSF if available, in order to speed up execution. It cannot be used in present design where only tree branches are diverted to separate files as top level Root file must be kept open in update mode.
# 
# -trace
#    Show trace of execution of shell commands.
#   
# -debug
#    Execute AliRoot under gdb. 
#
# -break <breakpoint>
#    Execute AliRoot under gdb and set <breakpoint>.
#
# -makeman
#    Create man page for alirun. 
#   
# EXAMPLES
#    Run sumulation for 1 event, 100 particles and store output in file test.root in /tmp/event.1 directory:
# 
#    alirun -o /tmp/event.1 -f test.root -p 100 -verbose -c Hits
#
#    Run sumulation for 1 event, 100 particles and store output in default file galice.root in /tmp/event.1 directory. In adition, divert branches of TreeD,TreeR and TreeK into separate files:
#    
#    alirun -o /tmp/event.2 -split -p 100 -verbose -c Hits
#
#   Use output from first step and create TOF and RICH digits. Output is in the same direcory and in file test.root
#
#    alirun -d TOF+RICH -o /tmp/event.1 -f test.root  -verbose -c Digits
#
#   Use output from second step and create digits for all detectors. Output is in the same direcory and branches are diverted to separate files:
#
#    alirun -d all -o /tmp/event.2 -split  -verbose -c Digits
#
# AUTHOR:
#    Predrag Buncic, e-mail: Predrag.Buncic@cern.ch 
#
# CREATION DATE:
#    06-Nov-2000
#
#C<
###########################################################################

###########################################################################
AliRun()
###########################################################################
{
   printf "Usage: alirun [[-d <TPC+ITS+..>|-all]]\n"
   printf "              [-f <hits file>]\n"
   printf "              [-o <output directory>]\n"
   printf "              [-split]\n"
   printf "              [-C <Config.C>]\n"
   printf "              [-p <particle#>]\n"
   printf "              [-seed <seed for random number generator>]\n"
   printf "              [-n event #]\n"
   printf "              <-c <command ...>>\n"
   exit
}

###########################################################################
Mktemp()
###########################################################################
{
  mktemp -qu /tmp/alirun.$$.XXXXXX
}

###########################################################################
Cleanup()
###########################################################################
{
  if [ -d $ALIRUN_TMPDIR ]
  then
    rm -rf $ALIRUN_TMPDIR
  fi
}

###########################################################################
AliRoot()
###########################################################################
{
  case $1 in
    Hits)
       macro=`HitsMacro`
       ;;
    Digits)
       macro=`DigitsMacro Hits2Digits`
       ;;
    SDigits)
       macro=`DigitsMacro Hits2SDigits`
       ;;
    SDigits2Digits)
       macro=`DigitsMacro SDigits2Digits`
       ;;
    *.C|*.C\(*\)) 
       macro=$1
       ;;
    *)
       printf "Unknown command: %s. Terminating...\n" $1
       exit 255
       ;;
  esac

  if [ "$2" != "" ]
  then  
    CONTEXT="<"$2">"
  else
    CONTEXT="<"None">"
  fi
  
  stdout=$ALIRUN_TMPDIR/STDOUT.$${$CONTEXT}

  hr="========================================"

  if [ "$VERBOSE" = "FALSE" ]
  then
    printf "%s\n+ aliroot -q -b %s %s\n%s\n" $hr$hr $1 $CONTEXT $hr$hr
  fi > $stdout

  if [ "$DEBUG" = "TRUE" ]
  then
  cat<<EOF>$ALIRUN_TMPDIR/gdb
b main
r -q -b $macro
disable breakpoints
b $BREAK
c
where
EOF
    $ECHO gdb -q -x $ALIRUN_TMPDIR/gdb aliroot 
  else
    if [ "$VERBOSE" = "TRUE" ] 
    then
      $ECHO aliroot -q -b $macro 
    else
      $ECHO aliroot -q -b $macro > $stdout 2>&1
      if [ $? -ne 0 ] 
      then
        echo "- "aliroot -q -b " "$1" "$CONTEXT
        cat $stdout
        exit
      else
        echo "+ "aliroot -q -b " "$1" "$CONTEXT
      fi
    fi
  fi

}


###########################################################################
HitsMacro()
###########################################################################
{
  macro=$ALIRUN_TMPDIR/Simulate.C 

  cat <<EOF> $macro

////////////////////////////////////////////////////////////////////////////
void Simulate()
{
   gAlice->Init(gSystem->Getenv("CONFIG"));

   gAlice->Run(1);
}
////////////////////////////////////////////////////////////////////////////

EOF
 echo $macro
}

###########################################################################
DigitsMacro()
###########################################################################
{
  mode=$1

  macro=$ALIRUN_TMPDIR/Digitize.C 

  cat <<EOF> $macro

////////////////////////////////////////////////////////////////////////////
void Digitize()
{
   gAlice->OpenBaseFile("update");

   if (gAlice) delete gAlice;
   
   AliRun *gAlice = (AliRun*)gDirectory->Get("gAlice");
  
   gAlice->$mode(gSystem->Getenv("CONFIG_DETECTOR"));
}
////////////////////////////////////////////////////////////////////////////

EOF
 echo $macro
}

###########################################################################
AliRunMakeman()
###########################################################################
{
   mangen -n tool $0
   if [ $? -eq 0 ]
   then
     if [ -d ../man/man4 ] 
     then
       mv $0.? ../man/man4
     fi
   fi
   exit
}

###########################################################################
AliRunMacro()
###########################################################################
{ 
  AliRoot $*
}

###########################################################################
AliRunHits()
###########################################################################
{ 
  AliRoot Hits
}

###########################################################################
AliRunDigits()
###########################################################################
{
  if [ "$DETECTORS" = "" ]
  then
    AliRoot Digits 
  else
    for det in $DETECTORS
    do
      export CONFIG_DETECTOR=$det;  
      if [ "$FORK" = "TRUE" ]
      then
        if [ "$LSF_FORK" = "TRUE" ]
        then
          lsrun AliRoot Digits $CONFIG_DETECTOR
        else
          AliRoot Digits $CONFIG_DETECTOR &
        fi
      else
        AliRoot Digits $CONFIG_DETECTOR
      fi
    done
    wait
  fi
}



###########################################################################

export ALL="MUON RICH TOF ITS TPC PHOS PMD CASTOR ZDC TRD"
export DETECTORS=""
export CONFIG_FILE="galice.root"
export CONFIG=$ALICE_ROOT/macros/Config.C
export CONFIG_NPARTICLES=50
export CONFIG_PATH=`pwd`

export ALIRUN_TMPDIR=`Mktemp`

DEBUG="FALSE"
BREAK=""
VERBOSE="TRUE"
OUTPUT=.
CMDLIST="Usage"
FORK="FALSE"
FORK_LSF="FALSE"
ECHO=""

if [ -x /usr/local/lsf/bin/lsrun ] 
then
  FORK_LSF="TRUE"  
fi

for config in $CONFIG_PATH/Config.C $ALICE_ROOT/macros/Config.C
do
  if [ -f $config ]
  then 
    export CONFIG=$config
    break
  fi
done

for param in $*
do
    case $param in
        -debug)
            shift 1
            DEBUG="TRUE"
            ;;
        -break)
            shift 1
            DEBUG="TRUE"
            BREAK=$1
            ;;
        -trace)
            shift 1
            set -vx
            ;;
        -echo)
            shift 1
            ECHO="echo "
            ;;
        -verbose)
            shift 1
            VERBOSE="TRUE"
            ;;
        -quiet)
            shift 1
            VERBOSE="FALSE"
            ;;
        -help)
            AliRun
             ;;
        -makeman)
            AliRunMakeman
             ;;
        -fork)
            shift 1
            FORK="TRUE"
            ;;
        -d)
            shift 1
            list=$1
            if [ "$list" = "all" ]
            then
               DETECTORS=$ALL
            else
               DETECTORS=`echo $list | sed 's/+/ /g'`
            fi
            ;;
        -all)
            shift 1
            DETECTORS=$ALL
            ;;
        -o)
            shift 1
            OUTPUT=$1
            ;;
        -split)
            shift 1
            export CONFIG_SPLIT_FILE="TRUE"
            ;;
        -f)
            shift 1
            export CONFIG_FILE=$1
            ;;
        -n)
            shift 1
            NEVENTS=$1
            ;;
        -p)
            shift 1
            export CONFIG_NPARTICLES=$1
            ;;
        -seed)
            shift 1
            export CONFIG_SEED=$1
            ;;
        -c) 
            shift 1
            CMDLIST=$*
            break
            ;;
        -C) 
            shift 1
            export CONFIG=$1
            ;;
        *)
            shift 1
            ;;
    esac
done


if [ `dirname $OUTPUT` = "." ]
then
  OUTPUT=`pwd`/$OUTPUT
fi

[ ! -d $OUTPUT        ] && mkdir -p $OUTPUT
[ ! -d $ALIRUN_TMPDIR ] && mkdir -p $ALIRUN_TMPDIR

trap Cleanup 2

(
 cd $OUTPUT
 for cmd in $CMDLIST
 do
    case `type -t AliRun$cmd` in
      function)
            shift 1
            AliRun$cmd $*
            ;;
         *)
            ;;
    esac
 done
)

Cleanup