#**************************************************************************
#**** This file is automatically generated from the mkmodules script  *****
#****          DO NOT EDIT!!                                          *****
#**************************************************************************


#********** This part is for package FMD ***********

#Determine if it's a library or a executable
TYPE=lib
    
# Package head directory, source and include directories
MODDIR:=FMD
MODDIRS:=$(MODDIR)
MODDIRI:=$(MODDIR)
MODDIRO:=$(MODDIR)/tgt_$(ALICE_TARGET)

# Reseting variables before importing pkg-file
SRCS:=
HDRS:=
FSRCS:=
DHDR:=
CSRCS:=
CHDRS:=
EINCLUDE:=
EDEFINE:=
ELIBS:=
ELIBSDIR:=
PACKFFLAGS:=
PACKCXXFLAGS:=
PACKCFLAGS:=
EXPORT:=
EHDRS:=
CINTHDRS:=
SRCS= AliFMD.cxx AliFMDv0.cxx AliFMDv1.cxx AliFMDv2.cxx AliFMDhit.cxx AliFMDdigit.cxx AliFMDMerger.cxx AliFMDReconstruction.cxx AliFMDReconstParticles.cxx AliFMDDigitizer.cxx AliFMDSDigitizer.cxx


HDRS= $(SRCS:.cxx=.h)

DHDR:=FMDLinkDef.h




ifndef PACKFFLAGS
FMDFFLAGS:=$(FFLAGS)
else
FMDFFLAGS:=$(PACKFFLAGS)
endif

ifndef PACKCFLAGS
FMDCFLAGS:=$(CFLAGS)
else
FMDCFLAGS:=$(PACKCFLAGS)
endif

ifndef PACKCXXFLAGS
FMDCXXFLAGS:=$(CXXFLAGS)
else
FMDCXXFLAGS:=$(PACKCXXFLAGS)
endif

ifndef PACKDCXXFLAGS
ifeq ($(PLATFORM),linuxicc)
FMDDCXXFLAGS:=$(filter-out -O%,$(CXXFLAGS)) -O0
else
FMDDCXXFLAGS:=$(filter-out -O%,$(CXXFLAGS))
endif
else
FMDDCXXFLAGS:=$(PACKCXXFLAGS)
endif


ifdef DHDR
WITHDICT=YES
else
WITHDICT=
endif

# Headerfiles exported to common place:
FMDEXPORT:=$(EXPORT)
FMDEXPORTDEST:=$(patsubst %,$(EXPORTDIR)/%,$(EXPORT))


#Extra include,libs, defines etc.

FMDDEFINE:=$(EDEFINE)

FMDINC:=$(patsubst %,-I%,$(EINCLUDE)) -IFMD

FMDELIBS:=$(patsubst %,-l%,$(ELIBS))
FMDELIBSDIR:=$(patsubst %,-L%,$(ELIBSDIR))

#c sources and headers

FMDCS:=$(patsubst %,$(MODDIR)/%,$(CSRCS))
FMDCH:=$(patsubst %,$(MODDIR)/%,$(CHDRS))

#Fortran sources 
FMDFS:=$(patsubst %,$(MODDIR)/%,$(FSRCS))

#c++ sources and header
FMDS:=$(patsubst %,$(MODDIR)/%,$(SRCS))
FMDH:=$(patsubst %,$(MODDIR)/%,$(HDRS)) $(EHDRS)

#############################################################################
#
#            If special rootcint headerfiles is specified use them
#                         else use all headers

ifndef CINTHDRS
FMDCINTHDRS:=$(FMDH) 
else
FMDCINTHDRS:=$(CINTHDRS)
endif
#############################################################################

# Package Dictionary 

FMDDH:=$(MODDIR)/$(DHDR)


#All objects
FMDCO:=$(patsubst %,$(MODDIRO)/%, $(CSRCS:.c=.o))
TEMP:=$(FSRCS:.F=.o)
FMDFO:=$(patsubst %,$(MODDIRO)/%, $(TEMP:.f=.o))
FMDO:= $(patsubst %,$(MODDIRO)/%, $(SRCS:.cxx=.o)) $(FMDFO) $(FMDCO)



ifdef WITHDICT
  FMDDS:=$(MODDIRO)/G__FMD.cxx
  FMDDO:=$(MODDIRO)/G__FMD.o
  FMDDDEP:=$(FMDDO:.o=.d)
  FMDDEP:=$(FMDO:.o=.d) $(FMDDDEP)
else
  FMDDS:=
  FMDDO:=
  FMDDDEP:=
  FMDDEP:=$(FMDO:.o=.d)
endif


#The actual library file

FMDLIB:=$(LIBPATH)/libFMD.$(SOEXT)

#Add this to the modules libs
FMDLIBS += $(FMDLIB)

#The actual binary file

FMDBIN:=$(BINPATH)/FMD

#Add to modules list of binaries
FMDBINS += $(FMDBIN)

# Use in the main Makefile

ifeq ($(TYPE),lib)
ALLLIBS += $(FMDLIB)
BINLIBS += -lFMD
else
ALLEXECS += $(FMDBIN)
endif

# include all dependency files
INCLUDEFILES +=$(FMDDEP)

EXPORTFILES += $(FMDEXPORTDEST)

#local rules

#The exportfiles only include if any!!

ifdef FMDEXPORT
#$(FMDEXPORTDEST): $(patsubst %,FMD/%,$(FMDEXPORT))

$(FMDEXPORTDEST): $(EXPORTDIR)/%.h: FMD/%.h
ifndef ALIQUIET
	  @echo "***** Copying file $^ to $@ *****"
endif
	  @[ -d $(dir $@) ] || mkdir $(dir $@)
	  @cp $^ $@	
endif

$(FMDLIB):$(FMDO) $(FMDDO) FMD/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/FMD$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/FMD/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
      rm -f $(CURDIR)/$@ ;\
	  $(SHLD) $(SOFLAGS) -o $(CURDIR)/$@ $(notdir $(FMDO) $(FMDDO))  $(FMDELIBSDIR) $(FMDELIBS) $(SHLIB);\
      cd $(CURDIR) ; rm -rf $$TMPDIR
	  $(MUTE)chmod a-w $@

$(FMDBIN):$(FMDO) $(FMDDO) FMD/module.mk
ifndef ALIQUIET
	  @echo "***** Making executable $@ *****"
endif
	  $(MUTE)$(LD) $(LDFLAGS) $(FMDO) $(FMDDO) $(BINLIBDIRS) $(FMDELIBSDIR) $(FMDELIBS) $(LIBS) $(EXEFLAGS) -o $@ 

$(FMDDS): $(FMDCINTHDRS) $(FMDDH) FMD/module.mk
ifndef ALIQUIET
	 @echo "***** Creating $@ *****";	
endif
	 @(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	 $(MUTE)rootcint -f $@ -c $(FMDDEFINE) $(CINTFLAGS) $(FMDINC) $(FMDCINTHDRS) $(FMDDH) 

$(FMDDO): $(FMDDS)
ifndef ALIQUIET
		@echo "***** Compiling $< *****";
endif
		$(MUTE)$(CXX) -c $(FMDINC)  -I$(ALICE_ROOT) $< -o $@ $(FMDDCXXFLAGS)

#Different targets for the module

ifeq ($(TYPE),lib)
all-FMD: $(FMDLIB)
else
all-FMD: $(FMDBIN)
endif

depend-FMD: $(FMDDEP)

# determination of object files
$(MODDIRO)/%.o: $(MODDIRO)/%.cxx $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CXX) $(FMDDEFINE) -c $(FMDINC)   $< -o $@ $(FMDCXXFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.cxx $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CXX) $(FMDDEFINE) -c $(FMDINC)   $< -o $@ $(FMDCXXFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.F $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(FMDINC)  $< -o $@ $(FMDFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.f $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(FMDINC)  $< -o $@ $(FMDFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.c $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CC) $(FMDDEFINE) -c  $(FMDINC)  $< -o $@   $(FMDCFLAGS)

$(FMDDDEP): $(FMDDS)
ifndef ALIQUIET
		@echo "***** Making dependencies for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(FMDELIBSDIR) $(FMDINC) $(DEPINC)  $<" > $@

$(MODDIRO)/%.d: $(MODDIRS)/%.cxx
ifndef ALIQUIET
		@echo "***** Making dependencies for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(FMDDEFINE) $(FMDELIBSDIR) $(FMDINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.f
ifndef ALIQUIET
		@echo "***** Making dependencies for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool dependF "$(FMDELIBSDIR) $(FMDINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.F
ifndef ALIQUIET
		@echo "***** Making dependencies for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		$(MUTE)share/alibtool dependF "$(FMDELIBSDIR) $(FMDINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.c
ifndef ALIQUIET
		@echo "***** Making dependencies for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(FMDDEFINE) $(FMDELIBSDIR) $(FMDINC) $(DEPINC) $<" > $@

FMDCHECKS := $(patsubst %.cxx,FMD/check/%.viol,$(SRCS))

check-FMD: $(FMDCHECKS)

# IRST coding rule check 
FMD/check/%.i : FMD/%.cxx
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(MUTE)$(CXX) -E $(FMDDEFINE) $(FMDINC) $< > $@ $(FMDCXXFLAGS)
	@cd $(dir $@) ; $(IRST_INSTALLDIR)/patch/patch4alice.prl $(notdir $@)

# IRST coding rule check
FMD/check/%.viol : FMD/check/%.i
	@cd FMD ; [ -r FMD ] || ln -s ../FMD FMD
	-@echo $@ ; $(CODE_CHECK) $< ./FMD > $@

FMDPREPROC       = $(patsubst %.viol,%.i,$(FMDCHECKS))

FMDREVENGS       = $(patsubst %.viol,%.ii,$(FMDCHECKS))

.SECONDARY: $(FMDREVENGS) $(FMDPREPROC)

reveng-FMD:		FMD/check/classDiagram.dot

FMD/check/classDiagram.dot:	$(FMDPREPROC)
	@$(REV_ENG) $^
	@-mv classDiagram.dot $@

revdisp-FMD:	reveng-FMD
	@echo revdisp for FMD
	@cd FMD/check ; \
      $(IRST_INSTALLDIR)/webreveng/create-class-diagram-pages.sh
	@sed -e "s/\@PACKAGE\@/FMD/g" < $(ALICE_ROOT)/build/HomePage.html > FMD/check/HomePage.html


#  Clean option for the whole module
clean-FMD:
ifndef ALIQUIET
		@echo "***** Cleaning FMD *****"
endif
		$(MUTE)rm FMD/module.mk
		$(MUTE)rm -rf FMD/tgt_$(ALICE_TARGET) 
		$(MUTE)rm -f $(FMDLIBS)
		$(MUTE)rm -f $(FMDBINS)

clean-check-FMD:
ifndef ALIQUIET
		@echo "***** Cleaning code check for FMD *****"
endif
		$(MUTE)rm -f FMD/check/*.i FMD/check/*.ii FMD/check/*.viol

clean-reveng-FMD:
ifndef ALIQUIET
		@echo "***** Cleaning reverse engineering files for FMD *****"
endif
		$(MUTE)rm -f FMD/check/*.dot

