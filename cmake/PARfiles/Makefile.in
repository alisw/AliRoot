# Makefile for @PARMODULE@ -- automatically generated

# From ROOT
include Makefile.arch

# Name of this module
PAR_MODULE := @PARMODULE@

# Include paths
PAR_INCLUDES = -I. -I$(ALICE_ROOT)/include -I$(ALICE_PHYSICS)/include -I$(ROOTSYS)/include

# Get C++ flags form ROOT
PAR_CXXFLAGS = $(CXXFLAGS) $(PAR_INCLUDES)

#Â Get linker flags from ROOT
PAR_SOFLAGS = $(SOFLAGS) $(LDFLAGS)

# Exclude generated dictionaries from the list of sources
SRCS := $(filter-out $(wildcard G__*.cxx),$(wildcard *.cxx))

HDRS := $(SRCS:.cxx=.h)
DHDR := $(PAR_MODULE)LinkDef.h

SRCS += G__$(PAR_MODULE).cxx
OBJS := $(SRCS:.cxx=.o)

COLM := \033[35m
COLC := \033[36m
COLG := \033[32m
COLZ := \033[m

# Default rule (it's the first one, "all" is just a convention)
all: lib$(PAR_MODULE).so
	@echo -e "[$(COLM)$(PAR_MODULE)$(COLZ)] $(COLG)PARfile built successfully$(COLZ)"

# Abstract rule to compile classes to objects
%.o: %.cxx %.h
	@echo -e "[$(COLM)$(PAR_MODULE)$(COLZ)] compiling $(COLC)$<$(COLZ)"
	@$(CXX) $(PAR_CXXFLAGS) -c $< -o $@

# Generate library from objects
lib$(PAR_MODULE).so: $(OBJS)
	@echo -e "[$(COLM)$(PAR_MODULE)$(COLZ)]" building shared library
	@$(LD) $(PAR_SOFLAGS) $^ -o $@ $(EXPLLINKLIBS)

# Generate dictionary
G__$(PAR_MODULE).cxx G__$(PAR_MODULE).h: $(HDRS) $(DHDR)
	@echo -e "[$(COLM)$(PAR_MODULE)$(COLZ)]" generating dictionary
	@rootcint -f $@ -c $(PAR_INCLUDES) $^

# Delete all
clean:
	rm -f $(OBJS) *.so G__$(PAR_MODULE).*
