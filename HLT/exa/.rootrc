# @(#) $Id$
# Author: C. Loizides

# ROOT Environment settings are handled via the class TEnv. To see
# which values are active do: gEnv->Print().

# Path used by dynamic loader to find shared libraries and macros
# Paths are different for Unix and Windows. The example shows the defaults
# for all ROOT applications for either Unix or Windows.
#Unix.*.Root.DynamicPath:    .:/usr/store/root-v.3.05.05/lib/root
#Unix.*.Root.MacroPath:      .:/usr/store/root-v.3.05.05/share/root/macros
#WinNT.*.Root.DynamicPath:   .;/usr/store/root-v.3.05.05/bin;$(PATH)
#WinNT.*.Root.MacroPath:     .;/usr/store/root-v.3.05.05/share/root/macros

# Path where to look for TrueType fonts
#Unix.*.Root.UseTTFonts:     true
#Unix.*.Root.TTFontPath:     /usr/store/root-v.3.05.05/share/root/fonts

# Use thread library (if exists)
#Unix.*.Root.UseThreads:     false

# Show where item is found in the specified path
#Root.ShowPath:           false

# Activate memory statistics (size and cnt is used to trap allocation of
# blocks of a certain size after cnt times)
#Root.MemStat:            0
#Root.MemStat.size:      -1
#Root.MemStat.cnt:       -1
#Root.ObjectStat:         0

# Activate memory leak checker (use in conjunction with $ROOTSYS/bin/memprobe)
# Currently only works on Linux with gcc.
#Root.MemCheck:           0
#Root.MemCheckFile:       memcheck.out

# Global debug mode. When >0 turns on progressively more details debugging.
#Root.Debug:              0
#Root.Stacktrace:         yes

# Settings for X11 behaviour.
#X11.Sync:                no
#X11.FindBestVisual:      yes

# Default editor
#Unix.*.Editor:           vi
#WinNT.*.Editor:          notepad

# Default Fitter (current choices are Minuit and Fumili)
#Root.Fitter:             Minuit

# Specify list of file endings which TTabCom (TAB completion) should ignore.
#TabCom.FileIgnore:       .cpp:.h:.cmz

# TCanvas specific settings. Opaque move and resize show full pad during
# the operation instead of only the outline. Especially for resize you'll
# need serious CPU power. UseScreenFactor=true means to size canvas according
# to size of screen, so a canvas still looks good on a low resolution
# laptop screen without having to change canvas size in macros.
# HighLightColor 2 = red. ShowEventStatus allows the event status bar to
# be turned on by default. AutoExec allows TExec objects to be executed
# on mouse and key events.
#Canvas.MoveOpaque:          false
#Canvas.ResizeOpaque:        false
#Canvas.UseScreenFactor:     true
#Canvas.HighLightColor:      2
#Canvas.ShowEventStatus:     false
Canvas.AutoExec:            true

# Default histogram binnings for TTree::Draw()
#Hist.Binning.1D.x:          100

#Hist.Binning.2D.x:           40
#Hist.Binning.2D.y:           40
#Hist.Binning.2D.Prof:       100

#Hist.Binning.3D.x:           20
#Hist.Binning.3D.y:           20
#Hist.Binning.3D.z:           20
#Hist.Binning.3D.Profx:      100
#Hist.Binning.3D.Profy:      100

# THtml specific settings (for more see doc of THtml class)
Unix.*.Root.Html.SourceDir:  $(LEVEL3BASE)/level3code/src:$(LEVEL3BASE)/level3code/hough:$(LEVEL3BASE)/level3code/misc:$(LEVEL3BASE)/level3code/comp
#WinNT.*.Root.Html.SourceDir: .;src;include
Root.Html.OutputDir:         $(LEVEL3BASE)/htmldoc/
#Root.Html.Homepage:
#Root.Html.Header:
#Root.Html.Footer:
#Root.Html.Description:      //____________________
Root.Html.Author:           // Author:
#Root.Html.LastUpdate:       // @(#)
Root.Html.Copyright:        //*-- Copyright

# GUI specific settings
#Gui.Backend:                native
#Unix.*.Gui.NormalFont:      -adobe-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1
#Unix.*.Gui.BoldFont:        -adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-iso8859-1
#Unix.*.Gui.SmallFont:       -adobe-helvetica-medium-r-*-*-10-*-*-*-*-*-iso8859-1
#Unix.*.Gui.ProportionalFont: -adobe-courier-medium-r-*-*-12-*-*-*-*-*-iso8859-1
#WinNT.*.Gui.NormalFont:     -adobe-helvetica-medium-r-*-*-15-*-*-*-*-*-iso8859-1
#WinNT.*.Gui.BoldFont:       -adobe-helvetica-bold-r-*-*-15-*-*-*-*-*-iso8859-1
#WinNT.*.Gui.SmallFont:      -adobe-helvetica-medium-r-*-*-15-*-*-*-*-*-iso8859-1
#WinNT.*.Gui.ProportionalFont: -adobe-courier-medium-r-*-*-15-*-*-*-*-*-iso8859-1
#Gui.BackgroundColor:        #c0c0c0
#Gui.ForegroundColor:        black
#Gui.SelectForegroundColor:  white
#Gui.SelectBackgroundColor:  #000080
#Gui.IconPath:               $(HOME)/icons:/usr/store/root-v.3.05.05/share/root/icons:.
#Gui.MimeTypeFile:           $(HOME)/.root.mimes
# If above does not exists defaults to this:
#Gui.MimeTypeFile:           /usr/store/root-v.3.05.05/etc/root.mimes
# Can be either small, big, list, details
#Browser.IconStyle:          small
# Can be either name, type, size, date
#Browser.SortBy:             name
#Browser.GroupView:          1000
#Browser.ShowHidden:         no

# Rint (interactive ROOT executable) specific alias, logon and logoff macros
#Rint.Load:               rootalias.C
#Rint.Logon:              rootlogon.C
#Rint.Logoff:             rootlogoff.C
# Record session commands, set to "-" to turn off command recording
#Rint.History:            $(HOME)/.root_hist

# ACLiC customization.
# ACLiC.Linkdef specifies the suffix that will be added to the script name to
# try to locate a custom linkdef file when generating the dictionary.
#ACLiC.Linkdef:          _linkdef
# Set a top directory for storing the libraries produced by ACLiC
#ACLiC.BuildDir:        /where/I/would/like/my/compiled/scripts

# Default authentication method for rootd (0=clear, 1=SRP, 2=Krb5)
#Rootd.Authentication:   0

# Default authentication method for proofd (0=clear, 1=SRP, 2=Krb5)
#Proofd.Authentication:  0

# Plugin library handlers
#Plugin.TFile:        ^rfio:    TRFIOFile     RFIO    "TRFIOFile(const char*,Option_t*,const char*,Int_t)"
#+Plugin.TFile:       ^dcache:  TDCacheFile   DCache  "TDCacheFile(const char*,Option_t*,const char*,Int_t)"
#+Plugin.TFile:       ^chirp:   TChirpFile    Chirp   "TChirpFile(const char*,Option_t*,const char*,Int_t)"
#Plugin.TSystem:      ^rfio:    TRFIOSystem   RFIO    "TRFIOSystem()"
#Plugin.TSQLServer:   ^mysql:   TMySQLServer  MySQL   "TMySQLServer(const char*,const char*,const char*)"
#+Plugin.TSQLServer:  ^pgsql:   TPgSQLServer  PgSQL   "TPgSQLServer(const char*,const char*,const char*)"
#+Plugin.TSQLServer:  ^sapdb:   TSapDBServer  SapDB   "TSapDBServer(const char*,const char*,const char*)"
#+Plugin.TSQLServer:  ^oracle:  TOracleServer Oracle  "TOracleServer(const char*,const char*,const char*)"
#Plugin.TGrid:        ^alien    TAlien        RAliEn  "TAlien(const char*,const char*,const char*,const char*)"
#Plugin.TVirtualPad:         *  TPad          Gpad         "TPad()"
#Plugin.TVirtualHistPainter: *  THistPainter  HistPainter  "THistPainter()"
#Plugin.TVirtualTreePlayer:  *  TTreePlayer   TreePlayer   "TTreePlayer()"
#Plugin.TVirtualTreeViewer:  *  TTreeViewer   TreeViewer   "TTreeViewer(const TTree*)"
#Plugin.TVirtualGeoPainter:  *  TGeoPainter   GeomPainter  "TGeoPainter()"
#Plugin.TVirtualUtil3D:      *  TUtil3D       Graf3d       "TUtil3D()"
#Plugin.TVirtualUtilHist:    *  TUtilHist     Hist         "TUtilHist()"
#Plugin.TVirtualUtilPad:     *  TUtilPad      Gpad         "TUtilPad()"
#Plugin.TVirtualFitter:  Minuit TFitter       Minuit       "TFitter(Int_t)"
#+Plugin.TVirtualFitter: Fumili TFumili       Fumili       "TFumili(Int_t)"
#Plugin.TVirtualPS:      ps     TPostScript   Postscript   "TPostScript()"
#+Plugin.TVirtualPS:     svg    TSVG          Postscript   "TSVG()"
#Plugin.TViewerX3D:          *  TViewerX3D    X3d          "TViewerX3D(TVirtualPad*,Option_t*,const char*,UInt_t,UInt_t)"
#Plugin.TMinuitGraph:        *  TGraph        Graf         "TGraph(Int_t,const Double_t*,const Double_t*)"
#Plugin.TVirtualProof:       *  TProof        Proof        "TProof(const char*,const char*,const char*,Int_t)"
#Plugin.TPaletteEditor:      *  TASPaletteEditor  ASImage  "TASPaletteEditor(TAttImage*,UInt_t,UInt_t)"
#Plugin.TImage:              *  TASImage          ASImage  "TASImage()"
#Plugin.TFileDrawMap         *  TFileDrawMap  TreePlayer   "TFileDrawMap(const TFile*, const char*, const char*)"
#Plugin.TVirtualX:    x11       TGX11         GX11         "TGX11(const char*,const char*)"
#+Plugin.TVirtualX:   x11ttf    TGX11TTF      GX11TTF      "TGX11TTF()"
#+Plugin.TVirtualX:   win32     TGWin32       Win32        "TGWin32(const char*,const char*)"
#+Plugin.TVirtualX:   win32gdk  TGWin32       Win32gdk     "TGWin32(const char*,const char*)"
#Plugin.TGuiFactory:  root      TRootGuiFactory Gui        "TRootGuiFactory()"
#+Plugin.TGuiFactory: win32     TWin32GuiFactory Win32     "TWin32GuiFactory()"
#Plugin.TProofProgressDialog: * TProofProgressDialog ProofGui  "TProofProgressDialog(TVirtualProof*,const char*,Int_t,Long64_t,Long64_t)"

# Example of custom setting for the Rint application (root.exe).
# This overrides the default specified above for a generic application.
# Color 5 is yellow.
#Rint.Canvas.HighLightColor:      5
