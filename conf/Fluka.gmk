# $Id$
 
################### Geant4 specific definitions ################################

# include $(FLUGGINSTALL)/config/architecture.gmk

ifdef G4GEOMETRY_DEBUG
  CPPFLAGS += -DG4GEOMETRY_DEBUG
endif  

#
# C++ compilation flags
#

ifeq ($(ALICE_TARGET),Linux)

# Redefinition of -Wall option 
# in order to exclude warnings from G4 
# excluded for Geant4: -Wswitch -Wunused

  CXXOPTS := $(filter-out -Wall,$(CXXOPTS))
  CXXOPTS += -Wimplicit-int -Wimplicit-function-declaration\
	     -Wimplicit -Wmain -Wreturn-type -Wcomment \
	     -Wtrigraphs -Wformat -Wchar-subscripts \
	     -Wparentheses              
  CXXOPTS := $(patsubst -O%,-O% -Wuninitialized,$(CXXOPTS))
endif

ifeq ($(ALICE_TARGET),HP-UX.aCC)

# Adding options: 
# +Onolimit - excludes warnings from G4 
# +DAportable - necessary (if not set, run time error from object space)                         

  CXXOPTS := $(patsubst -O%,-O% +Onolimit,$(CXXOPTS))
  CXXOPTS := $(patsubst +O%,+O% +Onolimit,$(CXXOPTS))
  CXXOPTS += +DAportable
endif  
 
ifeq ($(ALICE_TARGET),OSF1)

  CXXOPTS := $(filter-out -nostdnew,$(CXXOPTS))
  CXXOPTS := $(filter-out -nortti,$(CXXOPTS))
  CXXOPTS += -ieee -timplicit_local
  ifndef G4NO_STD_NAMESPACE
    G4USE_STD_NAMESPACE := yes
    CXXOPTS += -std strict_ansi
  endif

endif  

ifeq ($(ALICE_TARGET),SunOS)

  # Excluded of +w option 
  # in order to exclude warnings from G4 
  CXXOPTS := $(filter-out +w,$(CXXOPTS))

endif  

#
# Geant4 include paths
#

#include $(G4INSTALL)/config/G4UI_USE.gmk
#include $(G4INSTALL)/config/G4VIS_USE.gmk
#include $(G4INSTALL)/config/interactivity.gmk
ifndef INCFLAGS
  INCFLAGS := \
              -I$(G4BASE_G4)/global/management/include \
	      -I$(G4BASE_G4)/global/STLInterface \
              -I$(G4BASE_G4)/global/HEPRandom/include \
              -I$(G4BASE_G4)/global/HEPGeometry/include \
              -I$(G4BASE_G4)/global/HEPNumerics/include \
              -I$(G4BASE_G4)/materials/include \
              -I$(G4BASE_G4)/geometry/management/include \
              -I$(G4BASE_G4)/geometry/solids/CSG/include \
              -I$(G4BASE_G4)/geometry/solids/specific/include \
              -I$(G4BASE_G4)/geometry/solids/BREPS/include \
              -I$(G4BASE_G4)/geometry/solids/Boolean/include \
              -I$(G4BASE_G4)/geometry/solids/STEP/include \
              -I$(G4BASE_G4)/geometry/solids/STEPinterface/include \
              -I$(G4BASE_G4)/geometry/volumes/include \
              -I$(G4BASE_G4)/geometry/magneticfield/include \
              -I$(G4BASE_G4)/graphics_reps/include \
              -I$(G4BASE_G4)/intercoms/include \
              -I$(G4BASE_G4)/source/g3tog4/include \
	      -I$(G4BASE)/dummyG4/include \
	      -I$(G4BASE)/Wrappers/include
endif
CPPFLAGS += $(INCFLAGS)
LDFLAGS += -L$(G4LIBDIR) 

# Addded for FLUGG: fortan and fluka libraries path
LDFLAGS += -L$(FORLIB) -L/lib -L$(FLUKA)

#
# Geant4 libraries
#

ifdef NEED_G4_LIBS

G4TMPDIR := $(G4TMP)/$(G4SYSTEM)/$(G4TARGET)
G4LIBDIR := $(G4LIB)/$(G4SYSTEM)
G4LIBDIR_G4 := $(G4LIB_G4)/$(G4SYSTEM)
LDFLAGS += -L$(G4LIBDIR) -L$(G4LIBDIR_G4) -L$(CLHEP_LIB_DIR)

ifdef LDLIBS
  USER_DEFINED_LDLIBS := 1
endif

# Because of the script for granular libraries which replaces part of LDLIBS
# and because of the way user defined LDLIBS was augmented historically I
# have split LDLIBS into 4 parts...
#

ifndef USER_DEFINED_LDLIBS

# LDLIBS1 contains the very high level libraries...
#
ifdef G4EXLIB
  LDLIBS1 := -l$(G4TARGET)
endif
  LDLIBS1 += $(EXTRALIBS)
  LDLIBS1 += $(VISLIBS) $(UILIBS)

# test if global libraries are present
GLOBALLIBS := $(shell test -f $(G4LIBDIR)/libG4global.$(SL) && echo yes)

ifdef GLOBALLIBS
  LDLIBS2 := \
	-lG4geometry \
	-lG4materials \
	-lG4graphics_reps \
	-lG4intercoms \
	-lG4dummy \
	-lG4global
else
  LDLIBS2 := \
	-lFggWrappers \
	-lG4geometrymng \
	-lG4volumes \
	-lG4csg \
	-lG4specsolids \
	-lG4geomBoolean \
	-lG4brep \
	-lG4step \
	-lG4stepinterface \
	-lG4geomver \
	-lG4magneticfield \
	-lG4materials \
	-lG4graphics_reps \
	-lG4intercoms \
	-lG4dummy \
	-lG4hepnumerics \
	-lG4globman
endif	

# Warning: do not add to LDLIBS2 with += becuase this causes it to be
# expanded too soon.  Hence extra libraries must have a different name...
# Extra libraries to resolve remaining circular dependencies...
#  LDLIBS2EXTRA = 

# LDLIBS3 contains the first set of low level libraries...
#
  LDLIBS3 += $(INTYLIBS)

endif # ifndef USER_DEFINED_LDLIBS

# LDLIBS4 contains the next set of low level libraries which historically
# (why?) the user is not supposed to be able to define...
#
ifdef G4USE_OSPACE
  LDLIBS4 += $(OSPACELIBS)
endif

  LDLIBS4 += $(LOADLIBS)

# Finally assemble libraries...
#
ifdef USER_DEFINED_LDLIBS
  LDLIBS_PREFINAL := $(LDLIBS)
else
  LDLIBS_PREFINAL = $(LDLIBS1) -lG3toG4 $(LDLIBS2) $(LDLIBS2EXTRA) $(LDLIBS3)
endif
  LDLIBS_PREFINAL += $(LDLIBS4)

LDLIBS = $(LDLIBS_PREFINAL)

# Addded for FLUGG: fortan and fluka libraries
LDLIBS += -lc
LDLIBS += -lflukahp
LDLIBS += -lg2c -lstdc++

G4LDLIBS = $(LDLIBS)

endif #ifdef NEED_G4_LIBS

