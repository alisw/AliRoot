#**************************************************************************
#**** This file is automatically generated from the mkmodules script  *****
#****          DO NOT EDIT!!                                          *****
#**************************************************************************
#-*- Mode: Makefile -*-

#********** This part is for package ZDC ***********

#Determine if it's a library or a executable
TYPE=lib

# Package head directory, source and include directories
MODDIR:=ZDC
MODDIRS:=$(MODDIR)
MODDIRI:=$(MODDIR)
MODDIRO:=$(MODDIR)/tgt_$(ALICE_TARGET)

# Reseting variables before importing pkg-file
SRCS:=
HDRS:=
FSRCS:=
DHDR:=
CSRCS:=
CHDRS:=
EINCLUDE:=
EDEFINE:=
ELIBS:=
ELIBSDIR:=
PACKFFLAGS:=
PACKCXXFLAGS:=
PACKCFLAGS:=
PACKDYFLAGS:=
PACKSOFLAGS:=
EXPORT:=
EHDRS:=
CINTHDRS:=
ARLIBS:=
SHLIBS:=
SUBDIR:=

SRCS= AliZDC.cxx AliZDCv1.cxx AliZDCv2.cxx AliZDCHit.cxx AliZDCDigit.cxx \
      AliGenZDC.cxx AliZDCFragment.cxx AliZDCMerger.cxx \
      AliZDCMergedHit.cxx AliZDCReco.cxx

HDRS= $(SRCS:.cxx=.h) 

DHDR:=ZDCLinkDef.h

#-*- Mode: Makefile -*-


ifndef PACKFFLAGS
ZDCFFLAGS:=$(FFLAGS)
else
ZDCFFLAGS:=$(PACKFFLAGS)
endif

ifndef PACKCFLAGS
ZDCCFLAGS:=$(CFLAGS)
else
ZDCCFLAGS:=$(PACKCFLAGS)
endif

ifndef PACKCXXFLAGS
ZDCCXXFLAGS:=$(CXXFLAGS)
else
ZDCCXXFLAGS:=$(PACKCXXFLAGS)
endif

ifndef PACKSOFLAGS
ZDCSOFLAGS:=$(SOFLAGS)
else
ZDCSOFLAGS:=$(PACKSOFLAGS)
endif

ifdef DYEXT
ifndef PACKDYFLAGS
ZDCDYFLAGS:=$(DYFLAGS)
else
ZDCDYFLAGS:=$(PACKDYFLAGS)
endif
endif

ifndef PACKDCXXFLAGS
ZDCDCXXFLAGS:=$(CXXFLAGSNO)
else
ZDCDCXXFLAGS:=$(PACKDCXXFLAGS)
endif


ifdef DHDR
WITHDICT=YES
else
WITHDICT=
endif

# Headerfiles exported to common place:
ZDCEXPORT:=$(EXPORT)
ZDCEXPORTDEST:=$(patsubst %,$(EXPORTDIR)/%,$(EXPORT))


#Extra include,libs, defines etc.

ZDCDEFINE:=$(EDEFINE) -D__MODULE__=\"ZDC\"

ZDCINC:=$(patsubst %,-I%,$(EINCLUDE)) -IZDC

ZDCELIBS:=$(patsubst %,-l%,$(ELIBS))
ZDCELIBSDEP:=$(patsubst %,lib/tgt_$(ALICE_TARGET)/lib%.$(SOEXT),$(ELIBS))
ZDCELIBSDIR:=$(patsubst %,-L%,$(ELIBSDIR))

#c sources and headers

ZDCCS:=$(patsubst %,$(MODDIR)/%,$(CSRCS))
ZDCCH:=$(patsubst %,$(MODDIR)/%,$(CHDRS))

#Fortran sources 
ZDCFS:=$(patsubst %,$(MODDIR)/%,$(FSRCS))

#c++ sources and header
ZDCS:=$(patsubst %,$(MODDIR)/%,$(SRCS))
ZDCH:=$(patsubst %,$(MODDIR)/%,$(HDRS)) $(EHDRS)

#c++ source subdirectories
ZDCSDIR:=$(SUBDIR)

#############################################################################
#
#            If special rootcint headerfiles is specified use them
#                         else use all headers

ifndef CINTHDRS
ZDCCINTHDRS:=$(ZDCH) 
else
ZDCCINTHDRS:=$(CINTHDRS)
endif
#############################################################################

# Package Dictionary 

ZDCDH:=$(MODDIR)/$(DHDR)


#All objects
ZDCCO:=$(patsubst %,$(MODDIRO)/%, $(CSRCS:.c=.o))
TEMP:=$(FSRCS:.F=.o)
ZDCFO:=$(patsubst %,$(MODDIRO)/%, $(TEMP:.f=.o))
ZDCO:= $(patsubst %,$(MODDIRO)/%, $(SRCS:.cxx=.o)) $(ZDCFO) $(ZDCCO)



ifdef WITHDICT
  ZDCDS:=$(MODDIRO)/G__ZDC.cxx
  ZDCDO:=$(MODDIRO)/G__ZDC.o
  ZDCDDEP:=$(ZDCDO:.o=.d)
  ZDCDEP:=$(ZDCO:.o=.d) $(ZDCDDEP)
else
  ZDCDS:=
  ZDCDO:=
  ZDCDDEP:=
  ZDCDEP:=$(ZDCO:.o=.d)
endif


#The actual library file

ZDCLIB:=$(LIBPATH)/libZDC.$(SOEXT)

ifneq ($(DYEXT),)
ZDCDLIB:=$(LIBPATH)/libZDC.$(DYEXT)
endif

ZDCALIB:=$(LIBPATH)/libZDC.$(AEXT)

#Add this to the modules libs
ZDCLIBS += $(ZDCLIB)
ZDCALIBS += $(ZDCALIB)
ifneq ($(DYEXT),)
ZDCDLIBS += $(ZDCDLIB)
endif

#The actual binary file

ZDCBIN:=$(BINPATH)/ZDC

#Add to modules list of binaries
ZDCBINS += $(ZDCBIN)

# Use in the main Makefile

ifeq ($(TYPE),lib)
ALLLIBS += $(ZDCLIB)
ALLALIBS += $(ZDCALIB)
ifneq ($(DYEXT),)
ALLLIBS += $(ZDCDLIB)
endif
BINLIBS += -lZDC
else
ALLEXECS += $(ZDCBIN)
endif

ifeq ($(DYEXT),)
ZDCLIB := $(ZDCLIB)
else
ZDCLIB := $(ZDCLIB)
endif

# include all dependence files
INCLUDEFILES +=$(ZDCDEP)

EXPORTFILES += $(ZDCEXPORTDEST)

#local rules

#The exportfiles only include if any!!

ifdef ZDCEXPORT
#$(ZDCEXPORTDEST): $(patsubst %,ZDC/%,$(ZDCEXPORT))

$(ZDCEXPORTDEST): $(EXPORTDIR)/%.h: ZDC/%.h
ifndef ALIQUIET
	  @echo "***** Copying file $^ to $@ *****"
endif
	  @[ -d $(dir $@) ] || mkdir -p $(dir $@)
	  @cp $^ $@	
endif

#------------------------------------------------------------------------

$(ZDCLIB):$(ZDCO) $(ZDCDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  TMPLIB=$(notdir $(ZDCLIB)); export TMPLIB;\
	  $(SHLD) $(ZDCSOFLAGS) -o $(CURDIR)/$@ $(notdir $(ZDCO) $(ZDCDO))  $(ZDCELIBSDIR) $(ZDCELIBS) $(SHLIB);\
	  chmod a-w $(CURDIR)/$@ ;\
	  cd $(ALICE_ROOT) ; \rm -rf $$TMPDIR

ifneq ($(DYEXT),)
$(ZDCDLIB):$(ZDCO) $(ZDCDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  $(DYLD) $(ZDCDYFLAGS) -o $(CURDIR)/$@ $(notdir $(ZDCO) $(ZDCDO))  $(ZDCELIBSDIR) $(ZDCELIBS) $(DYLIB);\
	  chmod a-w $(CURDIR)/$@ ;\
	  cd $(ALICE_ROOT) ; \rm -rf $$TMPDIR
endif

#------------------------------------------------------------------------

$(ZDCALIB):$(ZDCO) $(ZDCDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking static library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  TMPLIB=$(notdir $(ZDCLIB)); export TMPLIB;\
	  $(ALLD) $(ALFLAGS) $(CURDIR)/$@ $(notdir $(ZDCO) $(ZDCDO))  $(ZDCELIBSDIR) $(ZDCELIBS) $(ALLIB);\
      cd $(CURDIR) ; \rm -rf $$TMPDIR
	  $(MUTE)chmod a-w $@


$(ZDCBIN):$(ZDCO) $(ZDCDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Making executable $@ *****"
endif
ifeq ($(ALIPROFILE),YES)
	$(MUTE)$(LD) $(LDFLAGS) $(ZDCO) $(ARLIBS) $(SHLIBS) $(LIBS) $(EXEFLAGS) -o $@
else
	  $(MUTE)$(LD) $(LDFLAGS) $(ZDCO) $(ZDCDO) $(BINLIBDIRS) $(ZDCELIBSDIR) $(ZDCELIBS) $(LIBS) $(EXEFLAGS) -o $@
endif

$(ZDCDS): $(ZDCCINTHDRS) $(ZDCDH) ZDC/module.mk
ifndef ALIQUIET
	 @echo "***** Creating $@ *****";	
endif
	 @(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	 @\rm -f $(patsubst %.cxx,%.d, $@)
	 $(MUTE)rootcint -f $@ -c $(ZDCDEFINE) $(CINTFLAGS) $(ZDCINC) $(ZDCCINTHDRS) $(ZDCDH) 

$(ZDCDO): $(ZDCDS)
ifndef ALIQUIET
		@echo "***** Compiling $< *****";
endif
		$(MUTE)$(CXX) $(ZDCDEFINE) -c $(ZDCINC)  -I$(ALICE_ROOT) $< -o $@ $(ZDCDCXXFLAGS)

#Different targets for the module

ifeq ($(TYPE),lib)
all-ZDC: $(ZDCLIB)
ifneq ($(DYEXT),)
all-ZDC: $(ZDCDLIB)
endif
else
all-ZDC: $(ZDCBIN)
endif

depend-ZDC: $(ZDCDEP)

# determination of object files
$(MODDIRO)/%.o: $(MODDIR)/%.cxx $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CXX) $(ZDCDEFINE) -c $(ZDCINC)   $< -o $@ $(ZDCCXXFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.F $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(ZDCINC)  $< -o $@ $(ZDCFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.f $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(ZDCINC)  $< -o $@ $(ZDCFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.c $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CC) $(ZDCDEFINE) -c  $(ZDCINC)  $< -o $@   $(ZDCCFLAGS)

$(ZDCDDEP): $(ZDCDS)
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCELIBSDIR) $(ZDCINC) $(DEPINC)  $<" > $@

$(MODDIRO)/%.d: $(MODDIRS)/%.cxx
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCDEFINE) $(ZDCELIBSDIR) $(ZDCINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.f
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool dependF "$(ZDCELIBSDIR) $(ZDCINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.F
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		$(MUTE)share/alibtool dependF "$(ZDCELIBSDIR) $(ZDCINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.c
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCDEFINE) $(ZDCELIBSDIR) $(ZDCINC) $(DEPINC) $<" > $@

.PRECIOUS: $(patsubst %.cxx,$(MODDIRO)/%.d,$(SRCS))
.PRECIOUS: $(patsubst %.c,$(MODDIRO)/%.d,$(CSRCS))
.PRECIOUS: $(patsubst %.F,$(MODDIRO)/%.d,$(patsubst %.f,$(MODDIRO)/%.d,$(FSRCS)))

ZDCCHECKS := $(patsubst %.cxx,ZDC/check/%.viol,$(SRCS))

check-ZDC: $(ZDCCHECKS)

# IRST coding rule check 
ZDC/check/%.i : ZDC/%.cxx ZDC/%.h
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(MUTE)$(CXX) -E $(ZDCDEFINE) $(ZDCINC) $< > $@ $(ZDCCXXFLAGS)
	@cd $(dir $@) ; $(IRST_INSTALLDIR)/patch/patch4alice.prl $(notdir $@)

# IRST coding rule check
ZDC/check/$(SUBDIR)/%.viol : ZDC/check/$(SUBDIR)/%.i
	@cd ZDC ; [ -r ZDC ] || ln -s ../ZDC ZDC
	$(MUTE)echo $@ ; $(CODE_CHECK) $< ./ZDC/$(ZDCSDIR) > $@

# IRST coding rule check
ZDC/check/%.viol : ZDC/check/%.i
	@cd ZDC ; [ -r ZDC ] || ln -s ../ZDC ZDC
	$(MUTE)echo $@ ; $(CODE_CHECK) $< ./ZDC > $@

ZDCPREPROC       = $(patsubst %.viol,%.i,$(ZDCCHECKS))

ZDCREVENGS       = $(patsubst %.viol,%.ii,$(ZDCCHECKS))

.SECONDARY: $(ZDCREVENGS) $(ZDCPREPROC)

reveng-ZDC:		ZDC/check/classDiagram.dot

ZDC/check/classDiagram.dot:	$(ZDCPREPROC)
	@$(REV_ENG) $^
	@-mv classDiagram.dot $@

revdisp-ZDC:	reveng-ZDC
	@echo revdisp for ZDC
	@cd ZDC/check ; \
      $(IRST_INSTALLDIR)/webreveng/create-class-diagram-pages.sh
	@sed -e "s/\@PACKAGE\@/ZDC/g" < $(ALICE_ROOT)/build/HomePage.html > ZDC/check/HomePage.html

#-*- Mode: Makefile -*-

#********** This part is for package ZDCbase ***********

#Determine if it's a library or a executable
TYPE=lib

# Package head directory, source and include directories
MODDIR:=ZDC
MODDIRS:=$(MODDIR)
MODDIRI:=$(MODDIR)
MODDIRO:=$(MODDIR)/tgt_$(ALICE_TARGET)

# Reseting variables before importing pkg-file
SRCS:=
HDRS:=
FSRCS:=
DHDR:=
CSRCS:=
CHDRS:=
EINCLUDE:=
EDEFINE:=
ELIBS:=
ELIBSDIR:=
PACKFFLAGS:=
PACKCXXFLAGS:=
PACKCFLAGS:=
PACKDYFLAGS:=
PACKSOFLAGS:=
EXPORT:=
EHDRS:=
CINTHDRS:=
ARLIBS:=
SHLIBS:=
SUBDIR:=

#-*- Mode: Makefile -*-
# $Id$

SRCS= AliZDCDigit.cxx AliZDCRawStream.cxx

HDRS= $(SRCS:.cxx=.h) 

DHDR:=ZDCbaseLinkDef.h

EINCLUDE:=RAW

#-*- Mode: Makefile -*-


ifndef PACKFFLAGS
ZDCbaseFFLAGS:=$(FFLAGS)
else
ZDCbaseFFLAGS:=$(PACKFFLAGS)
endif

ifndef PACKCFLAGS
ZDCbaseCFLAGS:=$(CFLAGS)
else
ZDCbaseCFLAGS:=$(PACKCFLAGS)
endif

ifndef PACKCXXFLAGS
ZDCbaseCXXFLAGS:=$(CXXFLAGS)
else
ZDCbaseCXXFLAGS:=$(PACKCXXFLAGS)
endif

ifndef PACKSOFLAGS
ZDCbaseSOFLAGS:=$(SOFLAGS)
else
ZDCbaseSOFLAGS:=$(PACKSOFLAGS)
endif

ifdef DYEXT
ifndef PACKDYFLAGS
ZDCbaseDYFLAGS:=$(DYFLAGS)
else
ZDCbaseDYFLAGS:=$(PACKDYFLAGS)
endif
endif

ifndef PACKDCXXFLAGS
ZDCbaseDCXXFLAGS:=$(CXXFLAGSNO)
else
ZDCbaseDCXXFLAGS:=$(PACKDCXXFLAGS)
endif


ifdef DHDR
WITHDICT=YES
else
WITHDICT=
endif

# Headerfiles exported to common place:
ZDCbaseEXPORT:=$(EXPORT)
ZDCbaseEXPORTDEST:=$(patsubst %,$(EXPORTDIR)/%,$(EXPORT))


#Extra include,libs, defines etc.

ZDCbaseDEFINE:=$(EDEFINE) -D__MODULE__=\"ZDC\"

ZDCbaseINC:=$(patsubst %,-I%,$(EINCLUDE)) -IZDC

ZDCbaseELIBS:=$(patsubst %,-l%,$(ELIBS))
ZDCbaseELIBSDEP:=$(patsubst %,lib/tgt_$(ALICE_TARGET)/lib%.$(SOEXT),$(ELIBS))
ZDCbaseELIBSDIR:=$(patsubst %,-L%,$(ELIBSDIR))

#c sources and headers

ZDCbaseCS:=$(patsubst %,$(MODDIR)/%,$(CSRCS))
ZDCbaseCH:=$(patsubst %,$(MODDIR)/%,$(CHDRS))

#Fortran sources 
ZDCbaseFS:=$(patsubst %,$(MODDIR)/%,$(FSRCS))

#c++ sources and header
ZDCbaseS:=$(patsubst %,$(MODDIR)/%,$(SRCS))
ZDCbaseH:=$(patsubst %,$(MODDIR)/%,$(HDRS)) $(EHDRS)

#c++ source subdirectories
ZDCbaseSDIR:=$(SUBDIR)

#############################################################################
#
#            If special rootcint headerfiles is specified use them
#                         else use all headers

ifndef CINTHDRS
ZDCbaseCINTHDRS:=$(ZDCbaseH) 
else
ZDCbaseCINTHDRS:=$(CINTHDRS)
endif
#############################################################################

# Package Dictionary 

ZDCbaseDH:=$(MODDIR)/$(DHDR)


#All objects
ZDCbaseCO:=$(patsubst %,$(MODDIRO)/%, $(CSRCS:.c=.o))
TEMP:=$(FSRCS:.F=.o)
ZDCbaseFO:=$(patsubst %,$(MODDIRO)/%, $(TEMP:.f=.o))
ZDCbaseO:= $(patsubst %,$(MODDIRO)/%, $(SRCS:.cxx=.o)) $(ZDCbaseFO) $(ZDCbaseCO)



ifdef WITHDICT
  ZDCbaseDS:=$(MODDIRO)/G__ZDCbase.cxx
  ZDCbaseDO:=$(MODDIRO)/G__ZDCbase.o
  ZDCbaseDDEP:=$(ZDCbaseDO:.o=.d)
  ZDCbaseDEP:=$(ZDCbaseO:.o=.d) $(ZDCbaseDDEP)
else
  ZDCbaseDS:=
  ZDCbaseDO:=
  ZDCbaseDDEP:=
  ZDCbaseDEP:=$(ZDCbaseO:.o=.d)
endif


#The actual library file

ZDCbaseLIB:=$(LIBPATH)/libZDCbase.$(SOEXT)

ifneq ($(DYEXT),)
ZDCbaseDLIB:=$(LIBPATH)/libZDCbase.$(DYEXT)
endif

ZDCbaseALIB:=$(LIBPATH)/libZDCbase.$(AEXT)

#Add this to the modules libs
ZDCLIBS += $(ZDCbaseLIB)
ZDCALIBS += $(ZDCbaseALIB)
ifneq ($(DYEXT),)
ZDCDLIBS += $(ZDCbaseDLIB)
endif

#The actual binary file

ZDCbaseBIN:=$(BINPATH)/ZDCbase

#Add to modules list of binaries
ZDCBINS += $(ZDCbaseBIN)

# Use in the main Makefile

ifeq ($(TYPE),lib)
ALLLIBS += $(ZDCbaseLIB)
ALLALIBS += $(ZDCbaseALIB)
ifneq ($(DYEXT),)
ALLLIBS += $(ZDCbaseDLIB)
endif
BINLIBS += -lZDCbase
else
ALLEXECS += $(ZDCbaseBIN)
endif

ifeq ($(DYEXT),)
ZDCbaseLIB := $(ZDCbaseLIB)
else
ZDCbaseLIB := $(ZDCbaseLIB)
endif

# include all dependence files
INCLUDEFILES +=$(ZDCbaseDEP)

EXPORTFILES += $(ZDCbaseEXPORTDEST)

#local rules

#The exportfiles only include if any!!

ifdef ZDCbaseEXPORT
#$(ZDCbaseEXPORTDEST): $(patsubst %,ZDC/%,$(ZDCbaseEXPORT))

$(ZDCbaseEXPORTDEST): $(EXPORTDIR)/%.h: ZDC/%.h
ifndef ALIQUIET
	  @echo "***** Copying file $^ to $@ *****"
endif
	  @[ -d $(dir $@) ] || mkdir -p $(dir $@)
	  @cp $^ $@	
endif

#------------------------------------------------------------------------

$(ZDCbaseLIB):$(ZDCbaseO) $(ZDCbaseDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  TMPLIB=$(notdir $(ZDCbaseLIB)); export TMPLIB;\
	  $(SHLD) $(ZDCbaseSOFLAGS) -o $(CURDIR)/$@ $(notdir $(ZDCbaseO) $(ZDCbaseDO))  $(ZDCbaseELIBSDIR) $(ZDCbaseELIBS) $(SHLIB);\
	  chmod a-w $(CURDIR)/$@ ;\
	  cd $(ALICE_ROOT) ; \rm -rf $$TMPDIR

ifneq ($(DYEXT),)
$(ZDCbaseDLIB):$(ZDCbaseO) $(ZDCbaseDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  $(DYLD) $(ZDCbaseDYFLAGS) -o $(CURDIR)/$@ $(notdir $(ZDCbaseO) $(ZDCbaseDO))  $(ZDCbaseELIBSDIR) $(ZDCbaseELIBS) $(DYLIB);\
	  chmod a-w $(CURDIR)/$@ ;\
	  cd $(ALICE_ROOT) ; \rm -rf $$TMPDIR
endif

#------------------------------------------------------------------------

$(ZDCbaseALIB):$(ZDCbaseO) $(ZDCbaseDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking static library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  TMPLIB=$(notdir $(ZDCbaseLIB)); export TMPLIB;\
	  $(ALLD) $(ALFLAGS) $(CURDIR)/$@ $(notdir $(ZDCbaseO) $(ZDCbaseDO))  $(ZDCbaseELIBSDIR) $(ZDCbaseELIBS) $(ALLIB);\
      cd $(CURDIR) ; \rm -rf $$TMPDIR
	  $(MUTE)chmod a-w $@


$(ZDCbaseBIN):$(ZDCbaseO) $(ZDCbaseDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Making executable $@ *****"
endif
ifeq ($(ALIPROFILE),YES)
	$(MUTE)$(LD) $(LDFLAGS) $(ZDCbaseO) $(ARLIBS) $(SHLIBS) $(LIBS) $(EXEFLAGS) -o $@
else
	  $(MUTE)$(LD) $(LDFLAGS) $(ZDCbaseO) $(ZDCbaseDO) $(BINLIBDIRS) $(ZDCbaseELIBSDIR) $(ZDCbaseELIBS) $(LIBS) $(EXEFLAGS) -o $@
endif

$(ZDCbaseDS): $(ZDCbaseCINTHDRS) $(ZDCbaseDH) ZDC/module.mk
ifndef ALIQUIET
	 @echo "***** Creating $@ *****";	
endif
	 @(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	 @\rm -f $(patsubst %.cxx,%.d, $@)
	 $(MUTE)rootcint -f $@ -c $(ZDCbaseDEFINE) $(CINTFLAGS) $(ZDCbaseINC) $(ZDCbaseCINTHDRS) $(ZDCbaseDH) 

$(ZDCbaseDO): $(ZDCbaseDS)
ifndef ALIQUIET
		@echo "***** Compiling $< *****";
endif
		$(MUTE)$(CXX) $(ZDCbaseDEFINE) -c $(ZDCbaseINC)  -I$(ALICE_ROOT) $< -o $@ $(ZDCbaseDCXXFLAGS)

#Different targets for the module

ifeq ($(TYPE),lib)
all-ZDCbase: $(ZDCbaseLIB)
ifneq ($(DYEXT),)
all-ZDCbase: $(ZDCbaseDLIB)
endif
else
all-ZDCbase: $(ZDCbaseBIN)
endif

depend-ZDCbase: $(ZDCbaseDEP)

# determination of object files
$(MODDIRO)/%.o: $(MODDIR)/%.cxx $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CXX) $(ZDCbaseDEFINE) -c $(ZDCbaseINC)   $< -o $@ $(ZDCbaseCXXFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.F $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(ZDCbaseINC)  $< -o $@ $(ZDCbaseFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.f $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(ZDCbaseINC)  $< -o $@ $(ZDCbaseFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.c $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CC) $(ZDCbaseDEFINE) -c  $(ZDCbaseINC)  $< -o $@   $(ZDCbaseCFLAGS)

$(ZDCbaseDDEP): $(ZDCbaseDS)
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCbaseELIBSDIR) $(ZDCbaseINC) $(DEPINC)  $<" > $@

$(MODDIRO)/%.d: $(MODDIRS)/%.cxx
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCbaseDEFINE) $(ZDCbaseELIBSDIR) $(ZDCbaseINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.f
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool dependF "$(ZDCbaseELIBSDIR) $(ZDCbaseINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.F
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		$(MUTE)share/alibtool dependF "$(ZDCbaseELIBSDIR) $(ZDCbaseINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.c
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCbaseDEFINE) $(ZDCbaseELIBSDIR) $(ZDCbaseINC) $(DEPINC) $<" > $@

.PRECIOUS: $(patsubst %.cxx,$(MODDIRO)/%.d,$(SRCS))
.PRECIOUS: $(patsubst %.c,$(MODDIRO)/%.d,$(CSRCS))
.PRECIOUS: $(patsubst %.F,$(MODDIRO)/%.d,$(patsubst %.f,$(MODDIRO)/%.d,$(FSRCS)))

ZDCbaseCHECKS := $(patsubst %.cxx,ZDC/check/%.viol,$(SRCS))

check-ZDC: $(ZDCbaseCHECKS)

# IRST coding rule check 
ZDC/check/%.i : ZDC/%.cxx ZDC/%.h
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(MUTE)$(CXX) -E $(ZDCbaseDEFINE) $(ZDCbaseINC) $< > $@ $(ZDCbaseCXXFLAGS)
	@cd $(dir $@) ; $(IRST_INSTALLDIR)/patch/patch4alice.prl $(notdir $@)

# IRST coding rule check
ZDC/check/$(SUBDIR)/%.viol : ZDC/check/$(SUBDIR)/%.i
	@cd ZDC ; [ -r ZDC ] || ln -s ../ZDC ZDC
	$(MUTE)echo $@ ; $(CODE_CHECK) $< ./ZDC/$(ZDCbaseSDIR) > $@

# IRST coding rule check
ZDC/check/%.viol : ZDC/check/%.i
	@cd ZDC ; [ -r ZDC ] || ln -s ../ZDC ZDC
	$(MUTE)echo $@ ; $(CODE_CHECK) $< ./ZDC > $@

ZDCbasePREPROC       = $(patsubst %.viol,%.i,$(ZDCbaseCHECKS))

ZDCbaseREVENGS       = $(patsubst %.viol,%.ii,$(ZDCbaseCHECKS))

.SECONDARY: $(ZDCbaseREVENGS) $(ZDCbasePREPROC)

reveng-ZDCbase:		ZDCbase/check/classDiagram.dot

ZDCbase/check/classDiagram.dot:	$(ZDCbasePREPROC)
	@$(REV_ENG) $^
	@-mv classDiagram.dot $@

revdisp-ZDCbase:	reveng-ZDCbase
	@echo revdisp for ZDCbase
	@cd ZDCbase/check ; \
      $(IRST_INSTALLDIR)/webreveng/create-class-diagram-pages.sh
	@sed -e "s/\@PACKAGE\@/ZDCbase/g" < $(ALICE_ROOT)/build/HomePage.html > ZDCbase/check/HomePage.html

#-*- Mode: Makefile -*-

#********** This part is for package ZDCrec ***********

#Determine if it's a library or a executable
TYPE=lib

# Package head directory, source and include directories
MODDIR:=ZDC
MODDIRS:=$(MODDIR)
MODDIRI:=$(MODDIR)
MODDIRO:=$(MODDIR)/tgt_$(ALICE_TARGET)

# Reseting variables before importing pkg-file
SRCS:=
HDRS:=
FSRCS:=
DHDR:=
CSRCS:=
CHDRS:=
EINCLUDE:=
EDEFINE:=
ELIBS:=
ELIBSDIR:=
PACKFFLAGS:=
PACKCXXFLAGS:=
PACKCFLAGS:=
PACKDYFLAGS:=
PACKSOFLAGS:=
EXPORT:=
EHDRS:=
CINTHDRS:=
ARLIBS:=
SHLIBS:=
SUBDIR:=

#-*- Mode: Makefile -*-
# $Id$

SRCS= AliZDCReco.cxx AliZDCReconstructor.cxx

HDRS= $(SRCS:.cxx=.h) 

DHDR:=ZDCrecLinkDef.h

EINCLUDE:=RAW

#-*- Mode: Makefile -*-


ifndef PACKFFLAGS
ZDCrecFFLAGS:=$(FFLAGS)
else
ZDCrecFFLAGS:=$(PACKFFLAGS)
endif

ifndef PACKCFLAGS
ZDCrecCFLAGS:=$(CFLAGS)
else
ZDCrecCFLAGS:=$(PACKCFLAGS)
endif

ifndef PACKCXXFLAGS
ZDCrecCXXFLAGS:=$(CXXFLAGS)
else
ZDCrecCXXFLAGS:=$(PACKCXXFLAGS)
endif

ifndef PACKSOFLAGS
ZDCrecSOFLAGS:=$(SOFLAGS)
else
ZDCrecSOFLAGS:=$(PACKSOFLAGS)
endif

ifdef DYEXT
ifndef PACKDYFLAGS
ZDCrecDYFLAGS:=$(DYFLAGS)
else
ZDCrecDYFLAGS:=$(PACKDYFLAGS)
endif
endif

ifndef PACKDCXXFLAGS
ZDCrecDCXXFLAGS:=$(CXXFLAGSNO)
else
ZDCrecDCXXFLAGS:=$(PACKDCXXFLAGS)
endif


ifdef DHDR
WITHDICT=YES
else
WITHDICT=
endif

# Headerfiles exported to common place:
ZDCrecEXPORT:=$(EXPORT)
ZDCrecEXPORTDEST:=$(patsubst %,$(EXPORTDIR)/%,$(EXPORT))


#Extra include,libs, defines etc.

ZDCrecDEFINE:=$(EDEFINE) -D__MODULE__=\"ZDC\"

ZDCrecINC:=$(patsubst %,-I%,$(EINCLUDE)) -IZDC

ZDCrecELIBS:=$(patsubst %,-l%,$(ELIBS))
ZDCrecELIBSDEP:=$(patsubst %,lib/tgt_$(ALICE_TARGET)/lib%.$(SOEXT),$(ELIBS))
ZDCrecELIBSDIR:=$(patsubst %,-L%,$(ELIBSDIR))

#c sources and headers

ZDCrecCS:=$(patsubst %,$(MODDIR)/%,$(CSRCS))
ZDCrecCH:=$(patsubst %,$(MODDIR)/%,$(CHDRS))

#Fortran sources 
ZDCrecFS:=$(patsubst %,$(MODDIR)/%,$(FSRCS))

#c++ sources and header
ZDCrecS:=$(patsubst %,$(MODDIR)/%,$(SRCS))
ZDCrecH:=$(patsubst %,$(MODDIR)/%,$(HDRS)) $(EHDRS)

#c++ source subdirectories
ZDCrecSDIR:=$(SUBDIR)

#############################################################################
#
#            If special rootcint headerfiles is specified use them
#                         else use all headers

ifndef CINTHDRS
ZDCrecCINTHDRS:=$(ZDCrecH) 
else
ZDCrecCINTHDRS:=$(CINTHDRS)
endif
#############################################################################

# Package Dictionary 

ZDCrecDH:=$(MODDIR)/$(DHDR)


#All objects
ZDCrecCO:=$(patsubst %,$(MODDIRO)/%, $(CSRCS:.c=.o))
TEMP:=$(FSRCS:.F=.o)
ZDCrecFO:=$(patsubst %,$(MODDIRO)/%, $(TEMP:.f=.o))
ZDCrecO:= $(patsubst %,$(MODDIRO)/%, $(SRCS:.cxx=.o)) $(ZDCrecFO) $(ZDCrecCO)



ifdef WITHDICT
  ZDCrecDS:=$(MODDIRO)/G__ZDCrec.cxx
  ZDCrecDO:=$(MODDIRO)/G__ZDCrec.o
  ZDCrecDDEP:=$(ZDCrecDO:.o=.d)
  ZDCrecDEP:=$(ZDCrecO:.o=.d) $(ZDCrecDDEP)
else
  ZDCrecDS:=
  ZDCrecDO:=
  ZDCrecDDEP:=
  ZDCrecDEP:=$(ZDCrecO:.o=.d)
endif


#The actual library file

ZDCrecLIB:=$(LIBPATH)/libZDCrec.$(SOEXT)

ifneq ($(DYEXT),)
ZDCrecDLIB:=$(LIBPATH)/libZDCrec.$(DYEXT)
endif

ZDCrecALIB:=$(LIBPATH)/libZDCrec.$(AEXT)

#Add this to the modules libs
ZDCLIBS += $(ZDCrecLIB)
ZDCALIBS += $(ZDCrecALIB)
ifneq ($(DYEXT),)
ZDCDLIBS += $(ZDCrecDLIB)
endif

#The actual binary file

ZDCrecBIN:=$(BINPATH)/ZDCrec

#Add to modules list of binaries
ZDCBINS += $(ZDCrecBIN)

# Use in the main Makefile

ifeq ($(TYPE),lib)
ALLLIBS += $(ZDCrecLIB)
ALLALIBS += $(ZDCrecALIB)
ifneq ($(DYEXT),)
ALLLIBS += $(ZDCrecDLIB)
endif
BINLIBS += -lZDCrec
else
ALLEXECS += $(ZDCrecBIN)
endif

ifeq ($(DYEXT),)
ZDCrecLIB := $(ZDCrecLIB)
else
ZDCrecLIB := $(ZDCrecLIB)
endif

# include all dependence files
INCLUDEFILES +=$(ZDCrecDEP)

EXPORTFILES += $(ZDCrecEXPORTDEST)

#local rules

#The exportfiles only include if any!!

ifdef ZDCrecEXPORT
#$(ZDCrecEXPORTDEST): $(patsubst %,ZDC/%,$(ZDCrecEXPORT))

$(ZDCrecEXPORTDEST): $(EXPORTDIR)/%.h: ZDC/%.h
ifndef ALIQUIET
	  @echo "***** Copying file $^ to $@ *****"
endif
	  @[ -d $(dir $@) ] || mkdir -p $(dir $@)
	  @cp $^ $@	
endif

#------------------------------------------------------------------------

$(ZDCrecLIB):$(ZDCrecO) $(ZDCrecDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  TMPLIB=$(notdir $(ZDCrecLIB)); export TMPLIB;\
	  $(SHLD) $(ZDCrecSOFLAGS) -o $(CURDIR)/$@ $(notdir $(ZDCrecO) $(ZDCrecDO))  $(ZDCrecELIBSDIR) $(ZDCrecELIBS) $(SHLIB);\
	  chmod a-w $(CURDIR)/$@ ;\
	  cd $(ALICE_ROOT) ; \rm -rf $$TMPDIR

ifneq ($(DYEXT),)
$(ZDCrecDLIB):$(ZDCrecO) $(ZDCrecDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  $(DYLD) $(ZDCrecDYFLAGS) -o $(CURDIR)/$@ $(notdir $(ZDCrecO) $(ZDCrecDO))  $(ZDCrecELIBSDIR) $(ZDCrecELIBS) $(DYLIB);\
	  chmod a-w $(CURDIR)/$@ ;\
	  cd $(ALICE_ROOT) ; \rm -rf $$TMPDIR
endif

#------------------------------------------------------------------------

$(ZDCrecALIB):$(ZDCrecO) $(ZDCrecDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking static library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  TMPLIB=$(notdir $(ZDCrecLIB)); export TMPLIB;\
	  $(ALLD) $(ALFLAGS) $(CURDIR)/$@ $(notdir $(ZDCrecO) $(ZDCrecDO))  $(ZDCrecELIBSDIR) $(ZDCrecELIBS) $(ALLIB);\
      cd $(CURDIR) ; \rm -rf $$TMPDIR
	  $(MUTE)chmod a-w $@


$(ZDCrecBIN):$(ZDCrecO) $(ZDCrecDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Making executable $@ *****"
endif
ifeq ($(ALIPROFILE),YES)
	$(MUTE)$(LD) $(LDFLAGS) $(ZDCrecO) $(ARLIBS) $(SHLIBS) $(LIBS) $(EXEFLAGS) -o $@
else
	  $(MUTE)$(LD) $(LDFLAGS) $(ZDCrecO) $(ZDCrecDO) $(BINLIBDIRS) $(ZDCrecELIBSDIR) $(ZDCrecELIBS) $(LIBS) $(EXEFLAGS) -o $@
endif

$(ZDCrecDS): $(ZDCrecCINTHDRS) $(ZDCrecDH) ZDC/module.mk
ifndef ALIQUIET
	 @echo "***** Creating $@ *****";	
endif
	 @(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	 @\rm -f $(patsubst %.cxx,%.d, $@)
	 $(MUTE)rootcint -f $@ -c $(ZDCrecDEFINE) $(CINTFLAGS) $(ZDCrecINC) $(ZDCrecCINTHDRS) $(ZDCrecDH) 

$(ZDCrecDO): $(ZDCrecDS)
ifndef ALIQUIET
		@echo "***** Compiling $< *****";
endif
		$(MUTE)$(CXX) $(ZDCrecDEFINE) -c $(ZDCrecINC)  -I$(ALICE_ROOT) $< -o $@ $(ZDCrecDCXXFLAGS)

#Different targets for the module

ifeq ($(TYPE),lib)
all-ZDCrec: $(ZDCrecLIB)
ifneq ($(DYEXT),)
all-ZDCrec: $(ZDCrecDLIB)
endif
else
all-ZDCrec: $(ZDCrecBIN)
endif

depend-ZDCrec: $(ZDCrecDEP)

# determination of object files
$(MODDIRO)/%.o: $(MODDIR)/%.cxx $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CXX) $(ZDCrecDEFINE) -c $(ZDCrecINC)   $< -o $@ $(ZDCrecCXXFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.F $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(ZDCrecINC)  $< -o $@ $(ZDCrecFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.f $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(ZDCrecINC)  $< -o $@ $(ZDCrecFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.c $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CC) $(ZDCrecDEFINE) -c  $(ZDCrecINC)  $< -o $@   $(ZDCrecCFLAGS)

$(ZDCrecDDEP): $(ZDCrecDS)
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCrecELIBSDIR) $(ZDCrecINC) $(DEPINC)  $<" > $@

$(MODDIRO)/%.d: $(MODDIRS)/%.cxx
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCrecDEFINE) $(ZDCrecELIBSDIR) $(ZDCrecINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.f
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool dependF "$(ZDCrecELIBSDIR) $(ZDCrecINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.F
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		$(MUTE)share/alibtool dependF "$(ZDCrecELIBSDIR) $(ZDCrecINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.c
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCrecDEFINE) $(ZDCrecELIBSDIR) $(ZDCrecINC) $(DEPINC) $<" > $@

.PRECIOUS: $(patsubst %.cxx,$(MODDIRO)/%.d,$(SRCS))
.PRECIOUS: $(patsubst %.c,$(MODDIRO)/%.d,$(CSRCS))
.PRECIOUS: $(patsubst %.F,$(MODDIRO)/%.d,$(patsubst %.f,$(MODDIRO)/%.d,$(FSRCS)))

ZDCrecCHECKS := $(patsubst %.cxx,ZDC/check/%.viol,$(SRCS))

check-ZDC: $(ZDCrecCHECKS)

# IRST coding rule check 
ZDC/check/%.i : ZDC/%.cxx ZDC/%.h
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(MUTE)$(CXX) -E $(ZDCrecDEFINE) $(ZDCrecINC) $< > $@ $(ZDCrecCXXFLAGS)
	@cd $(dir $@) ; $(IRST_INSTALLDIR)/patch/patch4alice.prl $(notdir $@)

# IRST coding rule check
ZDC/check/$(SUBDIR)/%.viol : ZDC/check/$(SUBDIR)/%.i
	@cd ZDC ; [ -r ZDC ] || ln -s ../ZDC ZDC
	$(MUTE)echo $@ ; $(CODE_CHECK) $< ./ZDC/$(ZDCrecSDIR) > $@

# IRST coding rule check
ZDC/check/%.viol : ZDC/check/%.i
	@cd ZDC ; [ -r ZDC ] || ln -s ../ZDC ZDC
	$(MUTE)echo $@ ; $(CODE_CHECK) $< ./ZDC > $@

ZDCrecPREPROC       = $(patsubst %.viol,%.i,$(ZDCrecCHECKS))

ZDCrecREVENGS       = $(patsubst %.viol,%.ii,$(ZDCrecCHECKS))

.SECONDARY: $(ZDCrecREVENGS) $(ZDCrecPREPROC)

reveng-ZDCrec:		ZDCrec/check/classDiagram.dot

ZDCrec/check/classDiagram.dot:	$(ZDCrecPREPROC)
	@$(REV_ENG) $^
	@-mv classDiagram.dot $@

revdisp-ZDCrec:	reveng-ZDCrec
	@echo revdisp for ZDCrec
	@cd ZDCrec/check ; \
      $(IRST_INSTALLDIR)/webreveng/create-class-diagram-pages.sh
	@sed -e "s/\@PACKAGE\@/ZDCrec/g" < $(ALICE_ROOT)/build/HomePage.html > ZDCrec/check/HomePage.html

#-*- Mode: Makefile -*-

#********** This part is for package ZDCsim ***********

#Determine if it's a library or a executable
TYPE=lib

# Package head directory, source and include directories
MODDIR:=ZDC
MODDIRS:=$(MODDIR)
MODDIRI:=$(MODDIR)
MODDIRO:=$(MODDIR)/tgt_$(ALICE_TARGET)

# Reseting variables before importing pkg-file
SRCS:=
HDRS:=
FSRCS:=
DHDR:=
CSRCS:=
CHDRS:=
EINCLUDE:=
EDEFINE:=
ELIBS:=
ELIBSDIR:=
PACKFFLAGS:=
PACKCXXFLAGS:=
PACKCFLAGS:=
PACKDYFLAGS:=
PACKSOFLAGS:=
EXPORT:=
EHDRS:=
CINTHDRS:=
ARLIBS:=
SHLIBS:=
SUBDIR:=

#-*- Mode: Makefile -*-
# $Id$

SRCS= AliZDC.cxx AliZDCv1.cxx AliZDCv2.cxx \
      AliZDCHit.cxx AliZDCSDigit.cxx AliZDCFragment.cxx AliZDCDigitizer.cxx \
      AliGenZDC.cxx AliZDCMergedHit.cxx AliZDCMerger.cxx

HDRS= $(SRCS:.cxx=.h) 

DHDR:=ZDCsimLinkDef.h

EINCLUDE:=RAW

#-*- Mode: Makefile -*-


ifndef PACKFFLAGS
ZDCsimFFLAGS:=$(FFLAGS)
else
ZDCsimFFLAGS:=$(PACKFFLAGS)
endif

ifndef PACKCFLAGS
ZDCsimCFLAGS:=$(CFLAGS)
else
ZDCsimCFLAGS:=$(PACKCFLAGS)
endif

ifndef PACKCXXFLAGS
ZDCsimCXXFLAGS:=$(CXXFLAGS)
else
ZDCsimCXXFLAGS:=$(PACKCXXFLAGS)
endif

ifndef PACKSOFLAGS
ZDCsimSOFLAGS:=$(SOFLAGS)
else
ZDCsimSOFLAGS:=$(PACKSOFLAGS)
endif

ifdef DYEXT
ifndef PACKDYFLAGS
ZDCsimDYFLAGS:=$(DYFLAGS)
else
ZDCsimDYFLAGS:=$(PACKDYFLAGS)
endif
endif

ifndef PACKDCXXFLAGS
ZDCsimDCXXFLAGS:=$(CXXFLAGSNO)
else
ZDCsimDCXXFLAGS:=$(PACKDCXXFLAGS)
endif


ifdef DHDR
WITHDICT=YES
else
WITHDICT=
endif

# Headerfiles exported to common place:
ZDCsimEXPORT:=$(EXPORT)
ZDCsimEXPORTDEST:=$(patsubst %,$(EXPORTDIR)/%,$(EXPORT))


#Extra include,libs, defines etc.

ZDCsimDEFINE:=$(EDEFINE) -D__MODULE__=\"ZDC\"

ZDCsimINC:=$(patsubst %,-I%,$(EINCLUDE)) -IZDC

ZDCsimELIBS:=$(patsubst %,-l%,$(ELIBS))
ZDCsimELIBSDEP:=$(patsubst %,lib/tgt_$(ALICE_TARGET)/lib%.$(SOEXT),$(ELIBS))
ZDCsimELIBSDIR:=$(patsubst %,-L%,$(ELIBSDIR))

#c sources and headers

ZDCsimCS:=$(patsubst %,$(MODDIR)/%,$(CSRCS))
ZDCsimCH:=$(patsubst %,$(MODDIR)/%,$(CHDRS))

#Fortran sources 
ZDCsimFS:=$(patsubst %,$(MODDIR)/%,$(FSRCS))

#c++ sources and header
ZDCsimS:=$(patsubst %,$(MODDIR)/%,$(SRCS))
ZDCsimH:=$(patsubst %,$(MODDIR)/%,$(HDRS)) $(EHDRS)

#c++ source subdirectories
ZDCsimSDIR:=$(SUBDIR)

#############################################################################
#
#            If special rootcint headerfiles is specified use them
#                         else use all headers

ifndef CINTHDRS
ZDCsimCINTHDRS:=$(ZDCsimH) 
else
ZDCsimCINTHDRS:=$(CINTHDRS)
endif
#############################################################################

# Package Dictionary 

ZDCsimDH:=$(MODDIR)/$(DHDR)


#All objects
ZDCsimCO:=$(patsubst %,$(MODDIRO)/%, $(CSRCS:.c=.o))
TEMP:=$(FSRCS:.F=.o)
ZDCsimFO:=$(patsubst %,$(MODDIRO)/%, $(TEMP:.f=.o))
ZDCsimO:= $(patsubst %,$(MODDIRO)/%, $(SRCS:.cxx=.o)) $(ZDCsimFO) $(ZDCsimCO)



ifdef WITHDICT
  ZDCsimDS:=$(MODDIRO)/G__ZDCsim.cxx
  ZDCsimDO:=$(MODDIRO)/G__ZDCsim.o
  ZDCsimDDEP:=$(ZDCsimDO:.o=.d)
  ZDCsimDEP:=$(ZDCsimO:.o=.d) $(ZDCsimDDEP)
else
  ZDCsimDS:=
  ZDCsimDO:=
  ZDCsimDDEP:=
  ZDCsimDEP:=$(ZDCsimO:.o=.d)
endif


#The actual library file

ZDCsimLIB:=$(LIBPATH)/libZDCsim.$(SOEXT)

ifneq ($(DYEXT),)
ZDCsimDLIB:=$(LIBPATH)/libZDCsim.$(DYEXT)
endif

ZDCsimALIB:=$(LIBPATH)/libZDCsim.$(AEXT)

#Add this to the modules libs
ZDCLIBS += $(ZDCsimLIB)
ZDCALIBS += $(ZDCsimALIB)
ifneq ($(DYEXT),)
ZDCDLIBS += $(ZDCsimDLIB)
endif

#The actual binary file

ZDCsimBIN:=$(BINPATH)/ZDCsim

#Add to modules list of binaries
ZDCBINS += $(ZDCsimBIN)

# Use in the main Makefile

ifeq ($(TYPE),lib)
ALLLIBS += $(ZDCsimLIB)
ALLALIBS += $(ZDCsimALIB)
ifneq ($(DYEXT),)
ALLLIBS += $(ZDCsimDLIB)
endif
BINLIBS += -lZDCsim
else
ALLEXECS += $(ZDCsimBIN)
endif

ifeq ($(DYEXT),)
ZDCsimLIB := $(ZDCsimLIB)
else
ZDCsimLIB := $(ZDCsimLIB)
endif

# include all dependence files
INCLUDEFILES +=$(ZDCsimDEP)

EXPORTFILES += $(ZDCsimEXPORTDEST)

#local rules

#The exportfiles only include if any!!

ifdef ZDCsimEXPORT
#$(ZDCsimEXPORTDEST): $(patsubst %,ZDC/%,$(ZDCsimEXPORT))

$(ZDCsimEXPORTDEST): $(EXPORTDIR)/%.h: ZDC/%.h
ifndef ALIQUIET
	  @echo "***** Copying file $^ to $@ *****"
endif
	  @[ -d $(dir $@) ] || mkdir -p $(dir $@)
	  @cp $^ $@	
endif

#------------------------------------------------------------------------

$(ZDCsimLIB):$(ZDCsimO) $(ZDCsimDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  TMPLIB=$(notdir $(ZDCsimLIB)); export TMPLIB;\
	  $(SHLD) $(ZDCsimSOFLAGS) -o $(CURDIR)/$@ $(notdir $(ZDCsimO) $(ZDCsimDO))  $(ZDCsimELIBSDIR) $(ZDCsimELIBS) $(SHLIB);\
	  chmod a-w $(CURDIR)/$@ ;\
	  cd $(ALICE_ROOT) ; \rm -rf $$TMPDIR

ifneq ($(DYEXT),)
$(ZDCsimDLIB):$(ZDCsimO) $(ZDCsimDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  $(DYLD) $(ZDCsimDYFLAGS) -o $(CURDIR)/$@ $(notdir $(ZDCsimO) $(ZDCsimDO))  $(ZDCsimELIBSDIR) $(ZDCsimELIBS) $(DYLIB);\
	  chmod a-w $(CURDIR)/$@ ;\
	  cd $(ALICE_ROOT) ; \rm -rf $$TMPDIR
endif

#------------------------------------------------------------------------

$(ZDCsimALIB):$(ZDCsimO) $(ZDCsimDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Linking static library $@ *****"
endif
	  $(MUTE)TMPDIR=/tmp/ZDC$$$$.`date +%M%S` ; \
	  export TMPDIR; mkdir -p $$TMPDIR ; cd $$TMPDIR ; \
	  find $(CURDIR)/ZDC/tgt_$(ALICE_TARGET) -name '*.o' -exec ln -s {} . \; ;\
	  \rm -f $(CURDIR)/$@ ;\
	  TMPLIB=$(notdir $(ZDCsimLIB)); export TMPLIB;\
	  $(ALLD) $(ALFLAGS) $(CURDIR)/$@ $(notdir $(ZDCsimO) $(ZDCsimDO))  $(ZDCsimELIBSDIR) $(ZDCsimELIBS) $(ALLIB);\
      cd $(CURDIR) ; \rm -rf $$TMPDIR
	  $(MUTE)chmod a-w $@


$(ZDCsimBIN):$(ZDCsimO) $(ZDCsimDO) ZDC/module.mk
ifndef ALIQUIET
	  @echo "***** Making executable $@ *****"
endif
ifeq ($(ALIPROFILE),YES)
	$(MUTE)$(LD) $(LDFLAGS) $(ZDCsimO) $(ARLIBS) $(SHLIBS) $(LIBS) $(EXEFLAGS) -o $@
else
	  $(MUTE)$(LD) $(LDFLAGS) $(ZDCsimO) $(ZDCsimDO) $(BINLIBDIRS) $(ZDCsimELIBSDIR) $(ZDCsimELIBS) $(LIBS) $(EXEFLAGS) -o $@
endif

$(ZDCsimDS): $(ZDCsimCINTHDRS) $(ZDCsimDH) ZDC/module.mk
ifndef ALIQUIET
	 @echo "***** Creating $@ *****";	
endif
	 @(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	 @\rm -f $(patsubst %.cxx,%.d, $@)
	 $(MUTE)rootcint -f $@ -c $(ZDCsimDEFINE) $(CINTFLAGS) $(ZDCsimINC) $(ZDCsimCINTHDRS) $(ZDCsimDH) 

$(ZDCsimDO): $(ZDCsimDS)
ifndef ALIQUIET
		@echo "***** Compiling $< *****";
endif
		$(MUTE)$(CXX) $(ZDCsimDEFINE) -c $(ZDCsimINC)  -I$(ALICE_ROOT) $< -o $@ $(ZDCsimDCXXFLAGS)

#Different targets for the module

ifeq ($(TYPE),lib)
all-ZDCsim: $(ZDCsimLIB)
ifneq ($(DYEXT),)
all-ZDCsim: $(ZDCsimDLIB)
endif
else
all-ZDCsim: $(ZDCsimBIN)
endif

depend-ZDCsim: $(ZDCsimDEP)

# determination of object files
$(MODDIRO)/%.o: $(MODDIR)/%.cxx $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CXX) $(ZDCsimDEFINE) -c $(ZDCsimINC)   $< -o $@ $(ZDCsimCXXFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.F $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(ZDCsimINC)  $< -o $@ $(ZDCsimFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.f $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(ZDCsimINC)  $< -o $@ $(ZDCsimFFLAGS)

$(MODDIRO)/%.o: $(MODDIR)/%.c $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CC) $(ZDCsimDEFINE) -c  $(ZDCsimINC)  $< -o $@   $(ZDCsimCFLAGS)

$(ZDCsimDDEP): $(ZDCsimDS)
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCsimELIBSDIR) $(ZDCsimINC) $(DEPINC)  $<" > $@

$(MODDIRO)/%.d: $(MODDIRS)/%.cxx
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCsimDEFINE) $(ZDCsimELIBSDIR) $(ZDCsimINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.f
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool dependF "$(ZDCsimELIBSDIR) $(ZDCsimINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.F
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		$(MUTE)share/alibtool dependF "$(ZDCsimELIBSDIR) $(ZDCsimINC) $(DEPINC)  $<" > $@
$(MODDIRO)/%.d: $(MODDIRS)/%.c
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(ZDCsimDEFINE) $(ZDCsimELIBSDIR) $(ZDCsimINC) $(DEPINC) $<" > $@

.PRECIOUS: $(patsubst %.cxx,$(MODDIRO)/%.d,$(SRCS))
.PRECIOUS: $(patsubst %.c,$(MODDIRO)/%.d,$(CSRCS))
.PRECIOUS: $(patsubst %.F,$(MODDIRO)/%.d,$(patsubst %.f,$(MODDIRO)/%.d,$(FSRCS)))

ZDCsimCHECKS := $(patsubst %.cxx,ZDC/check/%.viol,$(SRCS))

check-ZDC: $(ZDCsimCHECKS)

# IRST coding rule check 
ZDC/check/%.i : ZDC/%.cxx ZDC/%.h
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(MUTE)$(CXX) -E $(ZDCsimDEFINE) $(ZDCsimINC) $< > $@ $(ZDCsimCXXFLAGS)
	@cd $(dir $@) ; $(IRST_INSTALLDIR)/patch/patch4alice.prl $(notdir $@)

# IRST coding rule check
ZDC/check/$(SUBDIR)/%.viol : ZDC/check/$(SUBDIR)/%.i
	@cd ZDC ; [ -r ZDC ] || ln -s ../ZDC ZDC
	$(MUTE)echo $@ ; $(CODE_CHECK) $< ./ZDC/$(ZDCsimSDIR) > $@

# IRST coding rule check
ZDC/check/%.viol : ZDC/check/%.i
	@cd ZDC ; [ -r ZDC ] || ln -s ../ZDC ZDC
	$(MUTE)echo $@ ; $(CODE_CHECK) $< ./ZDC > $@

ZDCsimPREPROC       = $(patsubst %.viol,%.i,$(ZDCsimCHECKS))

ZDCsimREVENGS       = $(patsubst %.viol,%.ii,$(ZDCsimCHECKS))

.SECONDARY: $(ZDCsimREVENGS) $(ZDCsimPREPROC)

reveng-ZDCsim:		ZDCsim/check/classDiagram.dot

ZDCsim/check/classDiagram.dot:	$(ZDCsimPREPROC)
	@$(REV_ENG) $^
	@-mv classDiagram.dot $@

revdisp-ZDCsim:	reveng-ZDCsim
	@echo revdisp for ZDCsim
	@cd ZDCsim/check ; \
      $(IRST_INSTALLDIR)/webreveng/create-class-diagram-pages.sh
	@sed -e "s/\@PACKAGE\@/ZDCsim/g" < $(ALICE_ROOT)/build/HomePage.html > ZDCsim/check/HomePage.html


#  Clean option for the whole module
clean-ZDC:
ifndef ALIQUIET
		@echo "***** Cleaning ZDC *****"
endif
		$(MUTE)rm ZDC/module.mk
		$(MUTE)rm -rf ZDC/tgt_$(ALICE_TARGET) 
		$(MUTE)rm -f $(ZDCLIBS)
		$(MUTE)rm -f $(ZDCBINS)

clean-check-ZDC:
ifndef ALIQUIET
		@echo "***** Cleaning code check for ZDC *****"
endif
		$(MUTE)rm -f `find ZDC/check -name '*.i'` `find ZDC/check -name '*.ii'` `find ZDC/check -name '*.viol'`

clean-reveng-ZDC:
ifndef ALIQUIET
		@echo "***** Cleaning reverse engineering files for ZDC *****"
endif
		$(MUTE)rm -f `find ZDC/check -name '*.dot'`

