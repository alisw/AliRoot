From 023ef78bf2bd86884fda3ab312227c0f129d04e7 Mon Sep 17 00:00:00 2001
From: gconesab <gustavo.conesa.balbastre@cern.ch>
Date: Fri, 8 May 2015 11:53:50 +0200
Subject: [PATCH 1/7] Change UpdateQuads with option to which data to update
 plus other cosmetics and cleaning

---
 EVE/EveDet/AliEveEMCALSModule.cxx | 302 +++++++++++++++++++-------------------
 EVE/EveDet/AliEveEMCALSModule.h   |  64 ++++----
 2 files changed, 186 insertions(+), 180 deletions(-)

diff --git a/EVE/EveDet/AliEveEMCALSModule.cxx b/EVE/EveDet/AliEveEMCALSModule.cxx
index 50bc813..435146b 100644
--- a/EVE/EveDet/AliEveEMCALSModule.cxx
+++ b/EVE/EveDet/AliEveEMCALSModule.cxx
@@ -24,7 +24,6 @@
 
 #include "AliEveEMCALSModule.h"
 
-class Riostream;
 class TEveTrans;
 class TEveElement;
 class TClonesArray;
@@ -33,9 +32,8 @@ class TBuffer3DTypes;
 class TBuffer3D;
 class TVirtualPad;
 class TVirtualViewer3D;
+
 class AliEveEMCALData;
-class AliEMCALHit;
-class AliEMCALDigit;
 class AliEveEMCALSModuleData;
 
 /// \cond CLASSIMP
@@ -138,33 +136,19 @@ AliEveEMCALSModule::AliEveEMCALSModule(const AliEveEMCALSModule &esm) :
   AddElement(fQuadSet2);
 }
 
+///
+/// Destructor.
+///
 AliEveEMCALSModule::~AliEveEMCALSModule()
 {
-  //
-  // Destructor.
-  //
-
   fPointSet->DecDenyDestroy();
-  fQuadSet->DecDenyDestroy();
+  fQuadSet ->DecDenyDestroy();
   fQuadSet2->DecDenyDestroy();
 
   if(fEMCALData) fEMCALData->DecRefCount();
 }
 
 ///
-/// Release the sm data, not implemented/used?
-///
-//______________________________________________________________________________
-void AliEveEMCALSModule::DropData() const
-{
-//   fNDigits   = 0;
-//   fNClusters = 0;
-//   fNHits     = 0;
-
-  return;
-}
-
-///
 /// Bounding box, Framebox and Palette
 ///
 //______________________________________________________________________________
@@ -230,7 +214,7 @@ void AliEveEMCALSModule::SetHitSize(Int_t size)
 /// Set source of data.
 ///
 //______________________________________________________________________________
-void AliEveEMCALSModule::SetDataSource(AliEveEMCALData* const data)
+void AliEveEMCALSModule::SetDataSource(AliEveEMCALData * data)
 {
   if ( data == fEMCALData ) return;
   
@@ -257,163 +241,183 @@ AliEveEMCALSModuleData* AliEveEMCALSModule::GetSModuleData() const
 /// Update hit/digit/cluster representation.
 ///
 //______________________________________________________________________________
-void AliEveEMCALSModule::UpdateQuads()
+void AliEveEMCALSModule::UpdateQuads(Bool_t iHits, Bool_t iDigits, Bool_t iClusters)
 {  
-  std::vector< std::vector<Double_t> > bufferDigit;
-  std::vector< std::vector<Double_t> > bufferCluster;
-  std::vector< std::vector<Float_t> >  bufferHit;
-  
-  Int_t nDigits, nClusters, nHits, oldSize;
-  Float_t hitX, hitY, hitZ;
   Int_t smId = fEMCALSModuleData->GetSmId();
   
-  //--------------------------
-  // Hits from runloader
-  //--------------------------
-  fPointSet->Reset();
-  
-  /*
-   TEvePointSet* points = fEMCALData->GetPointSetData();
-   char form[1000];
-   if(points){
-   sprintf(form,"N=%d", points->Size());
-   points->SetTitle(form);
-   points->SetMarkerSize(.5);
-   points->SetMarkerColor((Color_t)2);
-   fPointSet->AddElement(points);
-   }
-   else {printf("There is no hits in Runloader \n"); }
-   */
-  
   if (!fgStaticInit)
     InitStatics(fEMCALSModuleData);
   
   //--------------------------------
-  // digits ------------------------
+  // hits --------------------------
   //--------------------------------
   
-  // Define TEveQuadSet for digits
-  fQuadSet->SetOwnIds(kTRUE);
-  fQuadSet->Reset(TEveQuadSet::kQT_RectangleYZFixedDimX, kFALSE, 32);
-  fQuadSet->SetDefWidth (fEMCALSModuleData->GetPhiTileSize());
-  fQuadSet->SetDefHeight(fEMCALSModuleData->GetEtaTileSize());
-  fQuadSet->RefMainTrans().SetFrom(*fEMCALSModuleData->GetSModuleMatrix());
-  fQuadSet->SetPalette(fgFrameDigPalette);
-  
-  if     (smId < 10) 
-    fQuadSet->SetFrame(fgFrameBigBox   );
-  else if(smId < 12)  
-    fQuadSet->SetFrame(fgFrameSmallBox );
-  else if(smId < 18)  
-    fQuadSet->SetFrame(fgFrameDCalBox  );
-  else if(smId < 20)  
-    fQuadSet->SetFrame(fgFrameSmallDBox);
-  
-  // Get the digit information from the buffer
-  bufferDigit = fEMCALSModuleData->GetDigitBuffer();
-  
-  if(!bufferDigit.empty())
-  {
-    nDigits = fEMCALSModuleData->GetNDigits();
+  if(iHits)
+  {    
+    //--------------------------
+    // Hits from runloader
+    //--------------------------
+    fPointSet->Reset();
+    
+    /*
+     TEvePointSet* points = fEMCALData->GetPointSetData();
+     char form[1000];
+     if(points){
+     sprintf(form,"N=%d", points->Size());
+     points->SetTitle(form);
+     points->SetMarkerSize(.5);
+     points->SetMarkerColor((Color_t)2);
+     fPointSet->AddElement(points);
+     }
+     else {printf("There is no hits in Runloader \n"); }
+     */
+    
+    Float_t hitX = 0, hitY = 0, hitZ = 0;
+
+    std::vector< std::vector<Float_t> >  bufferHit;
     
-    AliDebug(1,Form("nDigits: %d", nDigits) );
+    bufferHit = fEMCALSModuleData->GetHitBuffer();
     
-    // loop over digits
-    for (Int_t id = 0; id < nDigits; id++) 
+    if(!bufferHit.empty())
     {
-      //	  Int_t iid = (Int_t)bufferDigit[id][0];
-      //	  Int_t isupMod = (Int_t)bufferDigit[id][1];
-      Double_t iamp = bufferDigit[id][2];
-      Int_t amp = (Int_t)(iamp+0.5);
-      //	  Double_t ix = bufferDigit[id][3];
-      Double_t iy = bufferDigit[id][4];
-      Double_t iz = bufferDigit[id][5];
+      char form[1000];
       
-      // Add digit information to the TEveQuadSet
-      fQuadSet->AddQuad(iy, iz);
-      fQuadSet->QuadValue(amp);
-    } // end digits loop
-  }
-  else AliWarning(Form("There are no digits in SM %d", smId)); 
+      Int_t nHits = fEMCALSModuleData->GetNHits();
+      
+      AliDebug(1,Form("nHits: %d", nHits));
+      
+      Int_t oldSize = fPointSet->GrowFor(nHits);
+      
+      // Loop over hits
+      for (Int_t ih = 0; ih < nHits; ih++) 
+      {
+        hitX = bufferHit[ih][3];
+        hitY = bufferHit[ih][4];
+        hitZ = bufferHit[ih][5];
+        
+        fPointSet->SetPoint(ih,hitX,hitY,hitZ);
+        
+        snprintf(form,1000,"N=%d", fPointSet->Size());
+        fPointSet->SetTitle(form);
+        fPointSet->SetMarkerSize(.5);
+        fPointSet->SetMarkerColor((Color_t)2);
+      }
+    }
+    else AliDebug(1,Form("There are no hits in SM %d", smId));
+  }  
   
   //--------------------------------
-  // hits --------------------------
+  // digits ------------------------
   //--------------------------------
-
-  bufferHit = fEMCALSModuleData->GetHitBuffer();
   
-  if(!bufferHit.empty())
+  if(iDigits)
   {
-    char form[1000];
-    nHits = fEMCALSModuleData->GetNHits();
-    if(fDebug>1) Info("AliEveEMCALSModule::UpdateQuads", "nHits: %d", nHits);
-    oldSize = fPointSet->GrowFor(nHits);
-    // Loop over hits
-    for (Int_t ih = 0; ih < nHits; ih++) {
-      hitX = bufferHit[ih][3];
-      hitY = bufferHit[ih][4];
-      hitZ = bufferHit[ih][5];
-      fPointSet->SetPoint(ih,hitX,hitY,hitZ);
-      snprintf(form,1000,"N=%d", fPointSet->Size());
-      fPointSet->SetTitle(form);
-      fPointSet->SetMarkerSize(.5);
-      fPointSet->SetMarkerColor((Color_t)2);
+    std::vector< std::vector<Double_t> > bufferDigit;
+    
+    // Define TEveQuadSet for digits
+    fQuadSet->SetOwnIds(kTRUE);
+    fQuadSet->Reset(TEveQuadSet::kQT_RectangleYZFixedDimX, kFALSE, 32);
+    fQuadSet->SetDefWidth (fEMCALSModuleData->GetPhiTileSize());
+    fQuadSet->SetDefHeight(fEMCALSModuleData->GetEtaTileSize());
+    fQuadSet->RefMainTrans().SetFrom(*fEMCALSModuleData->GetSModuleMatrix(smId));
+    fQuadSet->SetPalette(fgFrameDigPalette);
+    
+    if     (smId < 10) 
+      fQuadSet->SetFrame(fgFrameBigBox   );
+    else if(smId < 12)  
+      fQuadSet->SetFrame(fgFrameSmallBox );
+    else if(smId < 18)  
+      fQuadSet->SetFrame(fgFrameDCalBox  );
+    else if(smId < 20)  
+      fQuadSet->SetFrame(fgFrameSmallDBox);
+    
+    // Get the digit information from the buffer
+    bufferDigit = fEMCALSModuleData->GetDigitBuffer();
+    
+    if(!bufferDigit.empty())
+    {
+      Int_t nDigits = fEMCALSModuleData->GetNDigits();
+      
+      AliDebug(1,Form("nDigits: %d", nDigits) );
+      
+      // loop over digits
+      for (Int_t id = 0; id < nDigits; id++) 
+      {
+        //	  Int_t iid = (Int_t)bufferDigit[id][0];
+        //	  Int_t isupMod = (Int_t)bufferDigit[id][1];
+        Double_t iamp = bufferDigit[id][2];
+        //Int_t amp = (Int_t)(iamp+0.5); // Why? Let it be float.
+        
+        //	  Double_t ix = bufferDigit[id][3];
+        Double_t iy = bufferDigit[id][4];
+        Double_t iz = bufferDigit[id][5];
+        
+        // Add digit information to the TEveQuadSet
+        fQuadSet->AddQuad(iy, iz);
+        fQuadSet->QuadValue(iamp);
+      } // end digits loop
     }
+    else AliDebug(1,Form("There are no digits in SM %d", smId)); 
   }
-  else AliWarning(Form("There are no hits in SM %d", smId));
   
   //----------------------------------
   // clusters ------------------------
   //----------------------------------
-
-  // Define TEveQuadSet for clusters
-  fQuadSet2->SetOwnIds(kTRUE);
-  fQuadSet2->Reset(TEveQuadSet::kQT_RectangleYZFixedDimX, kFALSE, 32);
-  fQuadSet2->SetDefWidth (fEMCALSModuleData->GetPhiTileSize());
-  fQuadSet2->SetDefHeight(fEMCALSModuleData->GetEtaTileSize());
-  fQuadSet2->RefMainTrans().SetFrom(*fEMCALSModuleData->GetSModuleMatrix());
-  fQuadSet2->SetPalette(fgFrameCluPalette);
-    
-  if     (smId < 10) 
-    fQuadSet2->SetFrame(fgFrameBigBox   );
-  else if(smId < 12)  
-    fQuadSet2->SetFrame(fgFrameSmallBox );
-  else if(smId < 18)  
-    fQuadSet2->SetFrame(fgFrameDCalBox  );
-  else if(smId < 20)  
-    fQuadSet2->SetFrame(fgFrameSmallDBox);
   
-  // Get the cluster information from the buffer
-  bufferCluster = fEMCALSModuleData->GetClusterBuffer();
-  if(!bufferCluster.empty())
+  if(iClusters)
   {
-    nClusters = fEMCALSModuleData->GetNClusters();
-    if(fDebug>1) Info("AliEveEMCALSModule::UpdateQuads", "nClusters: %d", nClusters );
-    // loop over clusters
-    for (Int_t id = 0; id < nClusters; id++) 
+    std::vector< std::vector<Double_t> > bufferCluster;
+    
+    // Define TEveQuadSet for clusters
+    fQuadSet2->SetOwnIds(kTRUE);
+    fQuadSet2->Reset(TEveQuadSet::kQT_RectangleYZFixedDimX, kFALSE, 32);
+    fQuadSet2->SetDefWidth (fEMCALSModuleData->GetPhiTileSize());
+    fQuadSet2->SetDefHeight(fEMCALSModuleData->GetEtaTileSize());
+    fQuadSet2->RefMainTrans().SetFrom(*fEMCALSModuleData->GetSModuleMatrix(smId));
+    fQuadSet2->SetPalette(fgFrameCluPalette);
+    
+    if     (smId < 10) 
+      fQuadSet2->SetFrame(fgFrameBigBox   );
+    else if(smId < 12)  
+      fQuadSet2->SetFrame(fgFrameSmallBox );
+    else if(smId < 18)  
+      fQuadSet2->SetFrame(fgFrameDCalBox  );
+    else if(smId < 20)  
+      fQuadSet2->SetFrame(fgFrameSmallDBox);
+    
+    // Get the cluster information from the buffer
+    bufferCluster = fEMCALSModuleData->GetClusterBuffer();
+    if(!bufferCluster.empty())
     {
-      AliDebug(1,Form("bufferCluster[%d][0]: %f",id, bufferCluster[id][0]));
-      AliDebug(1,Form("bufferCluster[%d][1]: %f",id, bufferCluster[id][1]));
-      AliDebug(1,Form("bufferCluster[%d][2]: %f",id, bufferCluster[id][2]));
-      AliDebug(1,Form("bufferCluster[%d][3]: %f",id, bufferCluster[id][3]));
-      AliDebug(1,Form("bufferCluster[%d][4]: %f",id, bufferCluster[id][4]));
-      
-      //	  Int_t isupMod = (Int_t)bufferCluster[id][0];
-      Double_t iamp = bufferCluster[id][1];
-      Int_t amp = (Int_t)(iamp+0.5);
-      //	  Double_t ix = bufferCluster[id][2];
-      Double_t iy = bufferCluster[id][3];
-      Double_t iz = bufferCluster[id][4];
+      Int_t nClusters = fEMCALSModuleData->GetNClusters();
       
-      // Add cluster information to the TEveQuadSet
-      fQuadSet2->AddQuad(iy, iz);
-      fQuadSet2->QuadValue(amp);
-      //      fQuadSet2->QuadId(iid);
+      AliDebug(1, Form("nClusters: %d", nClusters) );
       
-    } // end clusters loop
+      // loop over clusters
+      for (Int_t id = 0; id < nClusters; id++) 
+      {
+        AliDebug(1,Form("bufferCluster[%d][0]: %f",id, bufferCluster[id][0]));
+        AliDebug(1,Form("bufferCluster[%d][1]: %f",id, bufferCluster[id][1]));
+        AliDebug(1,Form("bufferCluster[%d][2]: %f",id, bufferCluster[id][2]));
+        AliDebug(1,Form("bufferCluster[%d][3]: %f",id, bufferCluster[id][3]));
+        AliDebug(1,Form("bufferCluster[%d][4]: %f",id, bufferCluster[id][4]));
+        
+        //	  Int_t isupMod = (Int_t)bufferCluster[id][0];
+        Double_t iamp = bufferCluster[id][1];
+        Int_t amp = (Int_t)(iamp+0.5);
+        //	  Double_t ix = bufferCluster[id][2];
+        Double_t iy = bufferCluster[id][3];
+        Double_t iz = bufferCluster[id][4];
+        
+        // Add cluster information to the TEveQuadSet
+        fQuadSet2->AddQuad(iy, iz);
+        fQuadSet2->QuadValue(amp);
+        //      fQuadSet2->QuadId(iid);
+        
+      } // end clusters loop
+    }
+    else AliDebug(1,Form("There are no clusters in SM %d", smId));
   }
-  else AliWarning(Form("There are no clusters in SM %d", smId));
-  
 }
 
 ///
diff --git a/EVE/EveDet/AliEveEMCALSModule.h b/EVE/EveDet/AliEveEMCALSModule.h
index eb5b881..6a1d261 100644
--- a/EVE/EveDet/AliEveEMCALSModule.h
+++ b/EVE/EveDet/AliEveEMCALSModule.h
@@ -16,29 +16,25 @@
 
 #include "AliEveEMCALSModuleData.h"
 
-class AliEveEMCALData;
+class TStyle;
+class TBuffer3DTypes;
+class TBuffer3D;
+class TVirtualPad;
+class TVirtualViewer3D;
+class TClonesArray;
+class TTree;
+class TGedFrame;
+
 class TEveQuadSet;
 class TEveBoxSet;
 class TEveFrameBox;
 class TEvePointSet;
-class TClonesArray;
-class TTree;
-class TGedFrame;
-class TGeoNode; 
-class TGeoMatrix; 
+class TEveTrans;
+
 class AliRun;
-class AliEMCALGeometry;
 class AliESDEvent;
-class AliEMCAL;
 
-class TEveTrans;
-class TStyle;
-class TBuffer3DTypes;
-class TBuffer3D;
-class TVirtualPad;
-class TVirtualViewer3D;
-class AliEMCALHit;
-class AliEMCALDigit;
+class AliEveEMCALData;
 
 class AliEveEMCALSModule : public TEveElement,
                            public TNamed,
@@ -51,11 +47,9 @@ class AliEveEMCALSModule : public TEveElement,
   
   ~AliEveEMCALSModule();
 
-  void DropData() const;
-
-  virtual Bool_t CanEditMainColor()        const { return kTRUE      ; }
+  virtual Bool_t CanEditMainColor()        const { return kTRUE      ; } // Remove?
 
-  void  SetDataSource(AliEveEMCALData * const data);
+  void  SetDataSource(AliEveEMCALData * data);
   
   void  SetSModuleID(Int_t id);
   
@@ -63,6 +57,8 @@ class AliEveEMCALSModule : public TEveElement,
   
   const AliEveEMCALData* GetData()         const { return fEMCALData ; }
   
+  void  DropData()                               { fEMCALSModuleData->DropData() ; }
+  
   AliEveEMCALSModuleData* GetSModuleData() const ;
   
   Int_t GetID()                            const { return fSModuleID ; }
@@ -71,20 +67,26 @@ class AliEveEMCALSModule : public TEveElement,
   
   void  SetHitSize(Int_t size);
 
-  void UpdateQuads();
+  void  UpdateQuads(Bool_t iHits, Bool_t iDigits, Bool_t iClusters);
 
+  TEveQuadSet * GetDigitQuadSet()          const { return fQuadSet   ; }
+  
+  TEveQuadSet * GetClusterQuadSet()        const { return fQuadSet2  ; }
+  
+  TEvePointSet* GetHitPointSet()           const { return fPointSet  ; }
+    
  protected:
   
-  AliEveEMCALData         *fEMCALData;         ///<  Data for the current event
-  AliEveEMCALSModuleData  *fEMCALSModuleData;  ///<  Data of Super Module (SM)
-  Color_t                 fFrameColor;         ///<  Main coloring
-  Int_t                   fSModuleID;          ///<  Id of super module, 0 to 11
-  TEveQuadSet             *fQuadSet;           ///<  Digit container
-  TEveQuadSet             *fQuadSet2;          ///<  Cluster container
-  TEvePointSet            *fPointSet;          ///<  Hit container
-  Int_t                   fClusterSize;        ///<  Cluster point size
-  Int_t                   fHitSize;            ///<  Hit point size
-  Int_t                   fDebug;              ///<  Debug option
+  AliEveEMCALData          *fEMCALData;        ///<  Data for the current event
+  AliEveEMCALSModuleData   *fEMCALSModuleData; ///<  Data of Super Module (SM)
+  Color_t                   fFrameColor;       ///<  Main coloring
+  Int_t                     fSModuleID;        ///<  Id of super module, 0 to 11
+  TEveQuadSet              *fQuadSet;          ///<  Digit container
+  TEveQuadSet              *fQuadSet2;         ///<  Cluster container
+  TEvePointSet             *fPointSet;         ///<  Hit container
+  Int_t                     fClusterSize;      ///<  Cluster point size
+  Int_t                     fHitSize;          ///<  Hit point size
+  Int_t                     fDebug;            ///<  Debug option
 
   static void InitStatics(AliEveEMCALSModuleData* md);
 
-- 
1.9.5 (Apple Git-50.3)


From 61ca38e1aa2e069f8ac07fff81ff57eea5d2f4e0 Mon Sep 17 00:00:00 2001
From: gconesab <gustavo.conesa.balbastre@cern.ch>
Date: Fri, 8 May 2015 11:54:05 +0200
Subject: [PATCH 2/7] comment out data members that store EMCAL SM matrix since
 not used, simplfy the bounding box of the super modules setting

---
 EVE/EveDet/AliEveEMCALSModuleData.cxx | 57 ++++++++++++++++-------------------
 EVE/EveDet/AliEveEMCALSModuleData.h   | 44 ++++++++++++---------------
 2 files changed, 45 insertions(+), 56 deletions(-)

diff --git a/EVE/EveDet/AliEveEMCALSModuleData.cxx b/EVE/EveDet/AliEveEMCALSModuleData.cxx
index 2306cc5..2730530 100644
--- a/EVE/EveDet/AliEveEMCALSModuleData.cxx
+++ b/EVE/EveDet/AliEveEMCALSModuleData.cxx
@@ -16,12 +16,14 @@
 #include <TGeoBBox.h>
 
 #include "AliEMCALGeometry.h"
+
 #include "AliEveEMCALSModuleData.h"
 
 class TClonesArray;
 class TGeoNode;
-class TGeoMatrix;
+//class TGeoMatrix;
 class TVector2;
+
 class AliEveEventManager;
 
 /// \cond CLASSIMP
@@ -44,15 +46,11 @@ Float_t AliEveEMCALSModuleData::fgSModuleSmallDBox0 = 0.;
 Float_t AliEveEMCALSModuleData::fgSModuleSmallDBox1 = 0.;
 Float_t AliEveEMCALSModuleData::fgSModuleSmallDBox2 = 0.;
 
-//Float_t AliEveEMCALSModuleData::fgSModuleCenter0 = 0.;
-//Float_t AliEveEMCALSModuleData::fgSModuleCenter1 = 0.;
-//Float_t AliEveEMCALSModuleData::fgSModuleCenter2 = 0.;
-
 //
 // Constructor
 //
 //______________________________________________________________________________
-AliEveEMCALSModuleData::AliEveEMCALSModuleData(Int_t sm,AliEMCALGeometry* geom, TGeoNode* node, TGeoHMatrix* m) :
+AliEveEMCALSModuleData::AliEveEMCALSModuleData(Int_t sm,AliEMCALGeometry* geom, TGeoNode* node): //, TGeoHMatrix* m) :
   TObject(),
   fGeom(geom),
   fNode(node),
@@ -64,9 +62,9 @@ AliEveEMCALSModuleData::AliEveEMCALSModuleData(Int_t sm,AliEMCALGeometry* geom,
   fPhiTileSize(0), fEtaTileSize(0),
   fHitArray(0),
   fDigitArray(0),
-  fClusterArray(0),
-  fMatrix(0),
-  fHMatrix(m)
+  fClusterArray(0)
+//  fMatrix(0), 
+//  fHMatrix(m) 
 {
   Init(sm);
 }
@@ -87,9 +85,9 @@ AliEveEMCALSModuleData::AliEveEMCALSModuleData(Int_t sm,AliEMCALGeometry* geom,
   fPhiTileSize(esmdata.fPhiTileSize), fEtaTileSize(esmdata.fEtaTileSize),
   fHitArray(esmdata.fHitArray),
   fDigitArray(esmdata.fDigitArray),
-  fClusterArray(esmdata.fClusterArray),
-  fMatrix(esmdata.fMatrix),
-  fHMatrix(esmdata.fHMatrix)
+  fClusterArray(esmdata.fClusterArray)
+//  fMatrix(esmdata.fMatrix),
+//  fHMatrix(esmdata.fHMatrix)
 {
   Init(esmdata.fNsm);
 }
@@ -111,7 +109,7 @@ AliEveEMCALSModuleData::~AliEveEMCALSModuleData()
 }
 
 ///
-/// Release the SM data
+/// Release the SM data.
 ///
 //______________________________________________________________________________
 void AliEveEMCALSModuleData::DropData()
@@ -142,36 +140,33 @@ void AliEveEMCALSModuleData::Init(Int_t sm)
   fPhiTileSize = fGeom->GetPhiTileSize();
   fEtaTileSize = fGeom->GetPhiTileSize();
 
-  TGeoBBox* bbbox  = (TGeoBBox*) fNode->GetDaughter(0) ->GetVolume()->GetShape();
-  TGeoBBox* sbbox  = (TGeoBBox*) fNode->GetDaughter(10)->GetVolume()->GetShape();
-  TGeoBBox* dbbox  = (TGeoBBox*) fNode->GetDaughter(12)->GetVolume()->GetShape();
-  TGeoBBox* dsbbox = (TGeoBBox*) fNode->GetDaughter(18)->GetVolume()->GetShape();
-
-  fMatrix = (TGeoMatrix*) fNode->GetDaughter(sm)->GetMatrix();
+  //fMatrix = (TGeoMatrix*) fNode->GetDaughter(sm)->GetMatrix();
 
+  TGeoBBox * bbox  = (TGeoBBox*) fNode->GetDaughter(sm)->GetVolume()->GetShape();
+  
   if(sm < 10)
   {
-    fgSModuleBigBox0 = bbbox->GetDX();
-    fgSModuleBigBox1 = bbbox->GetDY();
-    fgSModuleBigBox2 = bbbox->GetDZ();
+    fgSModuleBigBox0    = bbox->GetDX();
+    fgSModuleBigBox1    = bbox->GetDY();
+    fgSModuleBigBox2    = bbox->GetDZ();
   }
   else if(sm < 12) 
   {
-    fgSModuleSmallBox0 = sbbox->GetDX();
-    fgSModuleSmallBox1 = sbbox->GetDY();
-    fgSModuleSmallBox2 = sbbox->GetDZ();
+    fgSModuleSmallBox0  = bbox->GetDX();
+    fgSModuleSmallBox1  = bbox->GetDY();
+    fgSModuleSmallBox2  = bbox->GetDZ();
   }  
   else if(sm < 18) 
   {
-    fgSModuleDCalBox0 = dbbox->GetDX();
-    fgSModuleDCalBox1 = dbbox->GetDY();
-    fgSModuleDCalBox2 = dbbox->GetDZ();
+    fgSModuleDCalBox0   = bbox->GetDX();
+    fgSModuleDCalBox1   = bbox->GetDY();
+    fgSModuleDCalBox2   = bbox->GetDZ();
   }  
   else if(sm < 20) 
   {
-    fgSModuleSmallDBox0 = dsbbox->GetDX();
-    fgSModuleSmallDBox1 = dsbbox->GetDY();
-    fgSModuleSmallDBox2 = dsbbox->GetDZ();
+    fgSModuleSmallDBox0 = bbox->GetDX();
+    fgSModuleSmallDBox1 = bbox->GetDY();
+    fgSModuleSmallDBox2 = bbox->GetDZ();
   }
 }
 
diff --git a/EVE/EveDet/AliEveEMCALSModuleData.h b/EVE/EveDet/AliEveEMCALSModuleData.h
index a854060..775d4f2 100644
--- a/EVE/EveDet/AliEveEMCALSModuleData.h
+++ b/EVE/EveDet/AliEveEMCALSModuleData.h
@@ -21,37 +21,35 @@
 class TClonesArray;
 class TGeoNode;
 class TGeoMatrix;
+class TStyle;
+class TGedFrame;
+class TBuffer3DTypes;
+class TBuffer3D;
+class TVirtualPad;
+class TVirtualViewer3D;
+
 class TEvePointSet;
 class TEveQuadSet;
-
 class TEveBoxSet;
 class TEveFrameBox;
 class TEvePointSet;
 class TEveTrans;
 class TTree;
-class TStyle;
-class TGedFrame;
-class TBuffer3DTypes;
-class TBuffer3D;
-class TVirtualPad;
-class TVirtualViewer3D;
-class AliRun;
-class AliEMCALGeometry;
-class AliESDEvent;
-class AliEMCAL;
-class AliEMCALHit;
-class AliEMCALDigit;
+
 class AliEMCALGeometry;
 
 class AliEveEMCALSModuleData : public TObject
 {
 public:
   
-  AliEveEMCALSModuleData(Int_t chamber,AliEMCALGeometry* geom,TGeoNode* node, TGeoHMatrix* m);
+  AliEveEMCALSModuleData(Int_t chamber, AliEMCALGeometry* geom, TGeoNode* node); //, TGeoHMatrix* m);
+  
   virtual ~AliEveEMCALSModuleData();
 
   void        DropData();
+  
   void        Init(Int_t sm);
+  
   void        RegisterDigit  (Int_t AbsId, Int_t isupMod, Double_t iamp, Double_t ix, Double_t iy, Double_t iz);
   void        RegisterCluster(Int_t isupMod, Double_t iamp, Double_t ix, Double_t iy, Double_t iz); 
   void        RegisterHit    (Int_t AbsId, Int_t isupMod, Double_t iamp, Double_t ix, Double_t iy, Double_t iz); 
@@ -59,6 +57,7 @@ public:
   Int_t       GetNDigits()   const { return fNDigits   ; } 
   Int_t       GetNClusters() const { return fNClusters ; } 
   Int_t       GetNHits()     const { return fNHits     ; } 
+  
   Int_t       GetSmId()      const { return fSmId      ; }
   Int_t       GetNsm()       const { return fNsm       ; }
 
@@ -78,12 +77,11 @@ public:
   void        GetSModuleSmallDBox(Float_t& bbox0, Float_t& bbox1, Float_t& bbox2) 
   const { bbox0 = fgSModuleSmallDBox0; bbox1 = fgSModuleSmallDBox1; bbox2 = fgSModuleSmallDBox2;}
   
-//  void        GetSModuleCenter(Float_t& bboxCenter0, Float_t& bboxCenter1, Float_t& bboxCenter2) 
-//  const { bboxCenter0 = fgSModuleCenter0; bboxCenter1 = fgSModuleCenter1; bboxCenter2 = fgSModuleCenter2;}
-  
   Float_t     GetPhiTileSize()   const { return fPhiTileSize ; }
   Float_t     GetEtaTileSize()   const { return fEtaTileSize ; }
-  TGeoMatrix* GetSModuleMatrix() const { return fMatrix      ; }
+  
+  //TGeoMatrix* GetSModuleMatrix() const { return fMatrix      ; }
+  TGeoMatrix* GetSModuleMatrix(Int_t sm) const { return (TGeoMatrix*) fNode->GetDaughter(sm)->GetMatrix(); }
   
  protected:
   
@@ -118,12 +116,8 @@ public:
   static Float_t    fgSModuleSmallDBox1;   ///< SM envelope box, 1/3 DCAL
   static Float_t    fgSModuleSmallDBox2;   ///< SM envelope box, 1/3 DCAL
   
-  static Float_t    fgSModuleCenter0;      ///< SM envelope box
-  static Float_t    fgSModuleCenter1;      ///< SM envelope box
-  static Float_t    fgSModuleCenter2;      ///< SM envelope box
-
-  TGeoMatrix*       fMatrix;               ///< Matrix for local to global transformation
-  TGeoHMatrix*      fHMatrix;              ///< Matrix for local to global transformation
+  //  TGeoMatrix*       fMatrix;               ///< Matrix for local to global transformation (needed?)
+  //  TGeoHMatrix*      fHMatrix;              ///< Matrix for local to global transformation (needed?)
 
  private:
   
@@ -133,7 +127,7 @@ public:
   AliEveEMCALSModuleData& operator=(const AliEveEMCALSModuleData& esmdata); 
   
   /// \cond CLASSIMP
-  ClassDef(AliEveEMCALSModuleData, 1); 
+  ClassDef(AliEveEMCALSModuleData, 2); 
   /// \endcond
 
 };
-- 
1.9.5 (Apple Git-50.3)


From fe7f4f4256c9a6bebc6f52af30ee1fac2d31cd6a Mon Sep 17 00:00:00 2001
From: gconesab <gustavo.conesa.balbastre@cern.ch>
Date: Fri, 8 May 2015 12:01:48 +0200
Subject: [PATCH 3/7] set the run loader as data member, simplify the call to
 the loading data methods, clean-up unused data members or methods, general
 cosmetics

---
 EVE/EveDet/AliEveEMCALData.cxx | 375 ++++++++++++++++++-----------------------
 EVE/EveDet/AliEveEMCALData.h   |  69 ++++----
 2 files changed, 193 insertions(+), 251 deletions(-)

diff --git a/EVE/EveDet/AliEveEMCALData.cxx b/EVE/EveDet/AliEveEMCALData.cxx
index ce6e5ab..15802b4 100644
--- a/EVE/EveDet/AliEveEMCALData.cxx
+++ b/EVE/EveDet/AliEveEMCALData.cxx
@@ -23,15 +23,15 @@
 #include <TLorentzVector.h>
 
 #include "AliRunLoader.h"
+#include "AliESDVertex.h"
+#include "AliESDCaloCells.h"
+#include "AliESDCaloCluster.h"
+
 #include "AliEMCAL.h"
 #include "AliEMCALLoader.h"
-#include "AliESDVertex.h"
 #include "AliEMCALHit.h"
 #include "AliEMCALDigit.h"
-
 #include "AliEMCALRecPoint.h"
-#include "AliESDCaloCells.h"
-#include "AliESDCaloCluster.h"
 
 #include "AliEveEMCALData.h"
 #include "AliEveEMCALSModuleData.h"
@@ -40,117 +40,93 @@ class Riostream;
 class TObject;
 class TEveUtil;
 class TEvePointSet;
+
 class AliRun;
 class AliESDEvent;
+class AliLog;
+
 class AliEMCAL;
 class AliEMCALGeometry;
+
 class AliEveEMCALSModule;
-class AliLog;
 
 /// \cond CLASSIMP
 ClassImp(AliEveEMCALData) ;
 /// \endcond
 
 ///
-/// Default constructor
+/// Default constructor.
 ///
 //______________________________________________________________________________
 AliEveEMCALData::AliEveEMCALData():
   TObject(),
   TEveRefCnt(),
-  fEmcal(0x0),
   fGeom(0x0),
   fNode(0x0),
-  fHMatrix(0),
-  fTree(0x0),
+//  fHMatrix(0),
   fESD(0x0),
+  fRunLoader(0x0),
   fNsm(20),
   fSM(20),
-  fSMfull(10),
-  fSMhalf(2),
-  fSMfullD(6),
-  fSMhalfD(2),
-  fRunLoader(0),
-  fDebug(0),
-  fPoint(0),
+//  fPoint(0),
   fClusterMom()
 {
-  CreateAllSModules();
 }
 
 ///
-/// Constructor
+/// Constructor.
 ///
 //______________________________________________________________________________
-AliEveEMCALData::AliEveEMCALData(AliRunLoader* rl, TGeoNode* node, TGeoHMatrix* m):
+AliEveEMCALData::AliEveEMCALData(AliRunLoader* rl, TGeoNode* node): //, TGeoHMatrix* m):
   TObject(),
   TEveRefCnt(),
-  fEmcal(0x0),
   fGeom(0x0),
   fNode(node),
-  fHMatrix(m),
-  fTree(0x0),
+//  fHMatrix(m),
   fESD(0x0),
+  fRunLoader(rl),
   fNsm(20),
   fSM(20),
-  fSMfull(10),
-  fSMhalf(2),
-  fSMfullD(6),
-  fSMhalfD(2),
-  fRunLoader(rl),
-  fDebug(0),
-  fPoint(0),
+//  fPoint(0),
   fClusterMom()
-{
-  InitEMCALGeom(rl);
+{  
+  InitEMCALGeom();
+  
   CreateAllSModules();
 }
 
 ///
-/// Destructor
+/// Destructor.
 ///
 //______________________________________________________________________________
 AliEveEMCALData::~AliEveEMCALData()
 {
   DeleteSuperModules();
-  delete fTree;
-  // delete fEmcal; // deleted by run-loader
-  delete fGeom;
-  delete fNode;
-  delete fHMatrix;
-  delete fPoint;
+  //  delete fPoint;
 }
 
 ///
-/// Copy constructor
+/// Copy constructor.
 ///
 //______________________________________________________________________________
 AliEveEMCALData::AliEveEMCALData(const AliEveEMCALData &edata) :
   TObject(edata),
   TEveRefCnt(edata),
-  fEmcal(edata.fEmcal),
   fGeom(edata.fGeom),
   fNode(edata.fNode),
-  fHMatrix(edata.fHMatrix),
-  fTree(edata.fTree),
+//  fHMatrix(edata.fHMatrix),
   fESD(edata.fESD),
+  fRunLoader(edata.fRunLoader),
   fNsm    (edata.fNsm),
   fSM     (edata.fSM),
-  fSMfull (edata.fSMfull ),
-  fSMhalf (edata.fSMhalf ),  
-  fSMfullD(edata.fSMfullD),
-  fSMhalfD(edata.fSMhalfD),
-  fRunLoader(edata.fRunLoader),
-  fDebug(edata.fDebug),
-  fPoint(edata.fPoint),
+//  fPoint(edata.fPoint),
   fClusterMom(edata.fClusterMom)
 {
-  InitEMCALGeom(edata.fRunLoader);
   CreateAllSModules();
 }
 
 ///
-/// Assignment operator
+/// Assignment operator.
 ///
 //______________________________________________________________________________
 AliEveEMCALData& AliEveEMCALData::operator=(const AliEveEMCALData &edata)
@@ -163,61 +139,44 @@ AliEveEMCALData& AliEveEMCALData::operator=(const AliEveEMCALData &edata)
 }
 
 ///
-/// Set digit-tree to be used for digit retrieval. 
-/// Data is loaded on demand.
-///
-//______________________________________________________________________________
-void AliEveEMCALData::SetTree(TTree* const tree)
-{
-  fTree = tree;
-}
-
-///
-/// Set esd
+/// Set data members for EMCAL geometry.
 ///
 //______________________________________________________________________________
-void AliEveEMCALData::SetESD(AliESDEvent* const esd)
+void AliEveEMCALData::InitEMCALGeom()
 {
-  fESD = esd;
-}
-
-///
-/// Set node
-///
-//______________________________________________________________________________
-void AliEveEMCALData::SetNode(TGeoNode* const node)
-{
-  fNode = node;
-}
-
-///
-/// Set data members for EMCAL geometry
-///
-//______________________________________________________________________________
-void AliEveEMCALData::InitEMCALGeom(AliRunLoader* const rl)
-{
-  
-  if(rl)
+  if(fRunLoader && fRunLoader->GetAliRun())
   {
-    fEmcal = (AliEMCAL*) rl->GetAliRun()->GetDetector("EMCAL");
-    fGeom  = (AliEMCALGeometry*) fEmcal->GetGeometry();
+    AliEMCAL * emcal = (AliEMCAL*) fRunLoader->GetAliRun()->GetDetector("EMCAL");
+    
+    if ( emcal ) 
+      fGeom  = (AliEMCALGeometry*) emcal->GetGeometry();
   }
-  else
+  
+  if(!fGeom)
   {
     // Use default geometry, Run2. In case of running Run1, explicitely create
     // the instance for the corresponding Run1 geometry in the macro executing the
     // display or before.
+    
+    AliInfo("Set EMCAL geometry to default");
+    
     fGeom = AliEMCALGeometry::GetInstance(AliEMCALGeometry::GetDefaultGeometryName());
   }
   
   if(!fGeom) AliFatal("EMCAL geometry pointer is NULL");
   
-  // Get the number of super modules from geometry
-  fNsm = fGeom->GetNumberOfSuperModules();
+  // Get the number of super modules from the recovered nodes
+  // in case OCDB file used does not contain same SM as the requested geometry.
+  //fNsm = fGeom->GetNumberOfSuperModules();
+  fNsm = fNode->GetNdaughters();
+  
+  if(fNsm != fGeom->GetNumberOfSuperModules()) 
+    AliWarning(Form("Number of nodes (%d) is different to the number of expected super modules (%d)",
+                    fNsm,fGeom->GetNumberOfSuperModules()));
 }
 
 ///
-/// Get geometrical information from hit/digit/cluster absolute id
+/// Get geometrical information from hit/digit/cluster absolute id.
 ///
 //______________________________________________________________________________
 void AliEveEMCALData::GetGeomInfo(Int_t id, Int_t &iSupMod, Double_t& x, Double_t& y, Double_t& z)
@@ -234,43 +193,20 @@ void AliEveEMCALData::GetGeomInfo(Int_t id, Int_t &iSupMod, Double_t& x, Double_
 }
 
 ///
-/// Create all fNsm super modules
+/// Create all fNsm super modules.
 ///
 //______________________________________________________________________________
 void  AliEveEMCALData::CreateAllSModules()
 {
   for(Int_t sm = 0; sm < fNsm; sm++)
-    CreateSModule(sm);
-}
-
-///
-/// Create super-module-data for SM if it does not exist already.
-///
-//______________________________________________________________________________
-void  AliEveEMCALData::CreateSModule(Int_t sm)
-{
-  if     (fSM[sm] == 0)                    fSM     [sm]    = new AliEveEMCALSModuleData(sm,fGeom,fNode,fHMatrix);
-  if     (fSMfull [sm]    == 0 && sm < 10) fSMfull [sm]    = new AliEveEMCALSModuleData(sm,fGeom,fNode,fHMatrix);
-  else if(fSMhalf [sm-10] == 0 && sm < 12) fSMhalf [sm-10] = new AliEveEMCALSModuleData(sm,fGeom,fNode,fHMatrix);
-  else if(fSMfullD[sm-12] == 0 && sm < 18) fSMfullD[sm-12] = new AliEveEMCALSModuleData(sm,fGeom,fNode,fHMatrix);
-  else if(fSMhalfD[sm-18] == 0 && sm < 20) fSMhalfD[sm-18] = new AliEveEMCALSModuleData(sm,fGeom,fNode,fHMatrix);
-}
-
-///
-/// Drop data of all existing sectors.
-///
-//______________________________________________________________________________
-void AliEveEMCALData::DropAllSModules()
-{
-  for (Int_t sm = 0; sm < fNsm; sm++) 
   {
-    if (fSM[sm] != 0)
-      fSM[sm]->DropData();
+    if ( fSM[sm] == 0 ) 
+      fSM[sm] = new AliEveEMCALSModuleData(sm, fGeom, fNode);//,fHMatrix);
   }
 }
 
 ///
-/// Delete all super module data
+/// Delete all super module data.
 ///
 //______________________________________________________________________________
 void AliEveEMCALData::DeleteSuperModules()
@@ -279,38 +215,14 @@ void AliEveEMCALData::DeleteSuperModules()
   {
     fSM[sm] = 0;
     delete fSM[sm];
-  }
-  
-  for(Int_t smf = 0; smf < 10; smf++) 
-  {
-    fSMfull[smf] = 0;
-    delete fSMfull[smf];
-  }
-  
-  for(Int_t smh = 0; smh < 2; smh++)
-  {
-    fSMhalf[smh] = 0;
-    delete fSMhalf[smh];
-  }
-
-  for(Int_t smd = 0; smd < 6; smd++) 
-  {
-    fSMfullD[smd] = 0;
-    delete fSMfullD[smd];
-  }
-  
-  for(Int_t smh = 0; smh < 2; smh++)
-  {
-    fSMhalfD[smh] = 0;
-    delete fSMhalfD[smh];
-  }
+  }  
 }
 
 ///
-/// Get hit information from RunLoader
+/// Get hit information from AliRunLoader.
 ///
 //______________________________________________________________________________
-void AliEveEMCALData::LoadHits(TTree* const t)
+void AliEveEMCALData::LoadHits()
 {
   /*
    // These are global coordinates !
@@ -330,8 +242,14 @@ void AliEveEMCALData::LoadHits(TTree* const t)
    }
    */
   
+  fRunLoader->LoadHits("EMCAL");
+  
+  TTree * t = fRunLoader->GetTreeH("EMCAL",kFALSE);
+ 
   TObjArray *harr=NULL;
+  
   TBranch *hbranch=t->GetBranch("EMCAL");
+  
   hbranch->SetAddress(&harr);
   
   if(hbranch->GetEvent(0)) 
@@ -359,6 +277,8 @@ void AliEveEMCALData::LoadHits(TTree* const t)
       // Get SM Id
       GetGeomInfo(id,iSupMod,xl,yl,zl);
       
+      if(iSupMod >= fNsm ) continue ;
+      
       fSM[iSupMod]->RegisterHit(id,iSupMod,amp,x,y,z);
 //      if     ( iSupMod < 10 ) fSMfull [iSupMod]   ->RegisterHit(id,iSupMod,amp,x,y,z);
 //      else if( iSupMod < 12 ) fSMhalf [iSupMod-10]->RegisterHit(id,iSupMod,amp,x,y,z);
@@ -366,18 +286,27 @@ void AliEveEMCALData::LoadHits(TTree* const t)
 //      else if( iSupMod < 20 ) fSMhalfD[iSupMod-18]->RegisterHit(id,iSupMod,amp,x,y,z);
     }
   }
+  
+  fRunLoader->UnloadHits("EMCAL");
+  
+  AliDebug(1,"Hits loop done");  
 }
 
 ///
-/// Get hit information from EMCAL Loader
+/// Get hit information from AliEMCALLoader.
 ///
 //______________________________________________________________________________
-void AliEveEMCALData::LoadHitsFromEMCALLoader(AliEMCALLoader* const emcl)
-{  
+void AliEveEMCALData::LoadHitsFromEMCALLoader()
+{      
+  AliEMCALLoader * emcl = dynamic_cast<AliEMCALLoader*> (fRunLoader->GetDetectorLoader("EMCAL"));
+
+  fRunLoader->LoadHits("EMCAL");
+  
   AliEMCALHit* hit;
   
   // Fill array of hits                                                                        
   TClonesArray *hits = 0;//(TClonesArray*)emcl->Hits();
+ 
   TTree *treeH = emcl->TreeH();	
   
   if (!treeH) return ; 
@@ -418,30 +347,35 @@ void AliEveEMCALData::LoadHitsFromEMCALLoader(AliEMCALLoader* const emcl)
       // Get SM Id
       GetGeomInfo(id,iSupMod,xl,yl,zl);
       
-      fSM[iSupMod]->RegisterHit(id,iSupMod,amp,x,y,z);
+      if(iSupMod >= fNsm ) continue ;
       
-//      if     ( iSupMod < 10 ) fSMfull [iSupMod]   ->RegisterHit(id,iSupMod,amp,x,y,z);
-//      else if( iSupMod < 12 ) fSMhalf [iSupMod-10]->RegisterHit(id,iSupMod,amp,x,y,z);
-//      else if( iSupMod < 18 ) fSMfullD[iSupMod-12]->RegisterHit(id,iSupMod,amp,x,y,z);
-//      else if( iSupMod < 20 ) fSMhalfD[iSupMod-18]->RegisterHit(id,iSupMod,amp,x,y,z);
-    }//hit loop
+      fSM[iSupMod]->RegisterHit(id,iSupMod,amp,x,y,z);
+    }// hit loop
 
     hits->Clear();
   }// track loop
+  
+  fRunLoader->UnloadHits("EMCAL");
+  
+  AliDebug(1,"Hits loop done");  
 }
 
 ///
-/// Get digit information from RunLoader
+/// Get digit information from AliRunLoader.
 ///
 //______________________________________________________________________________
-void AliEveEMCALData::LoadDigits(TTree *t)
+void  AliEveEMCALData::LoadDigits()
 {
+  fRunLoader->LoadDigits("EMCAL");
+  
+  TTree * dt = fRunLoader->GetTreeD("EMCAL", kFALSE);
+
   TClonesArray *digits = 0;
-  t->SetBranchAddress("EMCAL", &digits);
-  t->GetEntry(0);
+  dt->SetBranchAddress("EMCAL", &digits);
+  dt->GetEntry(0);
   
   Int_t nEnt = digits->GetEntriesFast();
-  
+
   AliDebug(1,Form("Number of digits %d",nEnt));
   
   AliEMCALDigit * dig;
@@ -465,32 +399,37 @@ void AliEveEMCALData::LoadDigits(TTree *t)
     ampFlo  = dig->GetAmplitude(); // amplitude in cell (digit) ADC
                                    // acess OCDB and get calibration factor to GeV?	
     
+    // Do not add too low ADC values (3 times pedestal)
+    if(ampFlo <= 3 ) continue ;
+    
     GetGeomInfo(id,iSupMod,x,y,z);
     
+    if(iSupMod >= fNsm ) continue ;
+    
     fSM[iSupMod]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
-//	  fSM[iSupMod]->SaveDigit(dig);
-//    if     ( iSupMod < 10 ) fSMfull [iSupMod]   ->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
-//    else if( iSupMod < 12 ) fSMhalf [iSupMod-10]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
-//    else if( iSupMod < 18 ) fSMfullD[iSupMod-12]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
-//    else if( iSupMod < 20 ) fSMhalfD[iSupMod-18]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);  
   } // end loop digits
-
-  AliDebug(1,("Digits loop done"));
+  
+  fRunLoader->UnloadDigits("EMCAL");
+  
+  AliDebug(1,"Digits loop done");  
 }
 
 ///
-/// Get digit information from EMCAL Loader
+/// Get digit information from AliEMCALLoader.
 ///
 //______________________________________________________________________________
-void AliEveEMCALData::LoadDigitsFromEMCALLoader(AliEMCALLoader* const emcl)
-{
-  AliEMCALDigit* dig;
+void AliEveEMCALData::LoadDigitsFromEMCALLoader()
+{  
+  AliEMCALLoader * emcl = dynamic_cast<AliEMCALLoader*> (fRunLoader->GetDetectorLoader("EMCAL"));
+
+  fRunLoader->LoadDigits("EMCAL");
   
+  AliEMCALDigit* dig;
+
   // Fill array of digits                                                                        
   TClonesArray *digits = (TClonesArray*)emcl->Digits();
   
   // Get digits from the list  
-  
   Double_t ampFlo   = -1 ;
   Int_t id      = -1 ;
   Int_t iSupMod =  0 ;
@@ -498,7 +437,6 @@ void AliEveEMCALData::LoadDigitsFromEMCALLoader(AliEMCALLoader* const emcl)
   
   for(Int_t idig = 0; idig< digits->GetEntries();idig++)
   {
-    
     dig = static_cast<AliEMCALDigit *>(digits->At(idig)) ;
     
     if(!dig)
@@ -511,24 +449,37 @@ void AliEveEMCALData::LoadDigitsFromEMCALLoader(AliEMCALLoader* const emcl)
     ampFlo  = dig->GetAmplitude(); // amplitude in cell (digit) ADC
                                    // acess OCDB and get calibration factor to GeV?	
     
+    // Do not add too low ADC values (3 times pedestal)
+    if(ampFlo <= 3 ) continue ;
+    
     AliDebug(1,Form("Digit info %d, energy %2.3f",id, ampFlo));
     
     GetGeomInfo(id,iSupMod,x,y,z);
     
-    fSM[iSupMod]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
+    if(iSupMod >= fNsm ) continue ;
     
+    fSM[iSupMod]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
   } // end loop on digits
+ 
+  fRunLoader->UnloadDigits("EMCAL");
+  
+  AliDebug(1,"Digits loop done");    
 }
 
 ///
-/// Get digit information from esd
+/// Get digit information from ESDs.
 ///
 //______________________________________________________________________________
 void AliEveEMCALData::LoadDigitsFromESD()
 {
   AliESDCaloCells &cells= *(fESD->GetEMCALCells());
+  
   Int_t ncell = cells.GetNumberOfCells() ;  
+  
+  AliDebug(1,Form("Number of ESD CaloCells %d",ncell));
+  
   Int_t iSupMod =  0 ;
+  
   Double_t x, y, z;
   
   // Extract digit information from the ESDs
@@ -537,29 +488,28 @@ void AliEveEMCALData::LoadDigitsFromESD()
     Int_t id         = cells.GetCellNumber(icell);
     Double_t ampFlo  = cells.GetAmplitude (icell); // GeV
     
+    AliDebug(1,Form("CaloCell %d, ID %d, energy %2.3f",icell,id,ampFlo));
+    
     GetGeomInfo(id,iSupMod,x,y,z);
     
-    fSM[iSupMod]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
+    if(iSupMod >= fNsm ) continue ;
     
-    if     ( iSupMod < 10 ) fSMfull [iSupMod]   ->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
-    else if( iSupMod < 12 ) fSMhalf [iSupMod-10]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
-    else if( iSupMod < 18 ) fSMfullD[iSupMod-12]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
-    else if( iSupMod < 20 ) fSMhalfD[iSupMod-18]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
+    fSM[iSupMod]->RegisterDigit(id,iSupMod,ampFlo,x,y,z);
   } // end loop cells
+  
+  AliDebug(1,"CaloCells loop done");  
 }
 
 ///
-/// Get rec point information from RunLoader.
-/// To be improved, size and shape of cluster to be implemented.
+/// Get rec point information from AliRunLoader.
+/// To be improved!!!, size and shape of cluster to be implemented.
 ///
 //______________________________________________________________________________
-void AliEveEMCALData::LoadRecPoints(TTree* const t)
+void AliEveEMCALData::LoadRecPoints()
 {
-  //*************************************************
-  // To be improved !!!!!
-  // Size and shape of cluster to be implemented
-  // 
-  //*************************************************
+  fRunLoader->LoadRecPoints("EMCAL");
+
+  TTree * t = fRunLoader->GetTreeR("EMCAL",kFALSE);
   
   // From TTreeR
   TObjArray * carr = NULL;
@@ -576,30 +526,33 @@ void AliEveEMCALData::LoadRecPoints(TTree* const t)
     
     Int_t    iSupMod = rp->GetSuperModuleNumber();
     Double_t amp     = (Double_t)rp->GetEnergy();
-
+    
+    if(iSupMod >= fNsm ) continue ;
+    
     AliDebug(1,Form("RecPoint info, Id %d, energy %2.3f",rp->GetAbsId(0), amp));
 
     TVector3 lpos;
     rp->GetLocalPosition(lpos);
-    
+        
     fSM[iSupMod]->RegisterCluster(iSupMod,amp,lpos[0],lpos[1],lpos[2]);
   }
+
+  fRunLoader->UnloadRecPoints("EMCAL");
+  
+  AliDebug(1,"RecPoints loop done");    
 }
 
 ///
-/// Get rec point information from EMCalLoader.
-/// To be improved, size and shape of cluster to be implemented.
+/// Get rec point information from AliEMCALLoader.
+/// To be improved!!!, size and shape of cluster to be implemented.
 ///
 //______________________________________________________________________________
-void AliEveEMCALData::LoadRecPointsFromEMCALLoader(AliEMCALLoader* const emcl)
-{
-  //*************************************************
-  // To be improved !!!!!
-  // Size and shape of cluster to be implemented
-  // 
-  //*************************************************
+void AliEveEMCALData::LoadRecPointsFromEMCALLoader()
+{  
+  AliEMCALLoader * emcl = dynamic_cast<AliEMCALLoader*> (fRunLoader->GetDetectorLoader("EMCAL"));
+  
+  fRunLoader->LoadRecPoints("EMCAL");
   
-  // From EMCALLoader
   AliEMCALRecPoint* rp = 0;
   
   // Fill array of clusters                                                                        
@@ -615,6 +568,8 @@ void AliEveEMCALData::LoadRecPointsFromEMCALLoader(AliEMCALLoader* const emcl)
     Int_t    iSupMod = rp->GetSuperModuleNumber();
     Double_t amp     = (Double_t)rp->GetEnergy();
     
+    if(iSupMod >= fNsm ) continue ;
+    
     AliDebug(1,Form("RecPoint info, Id %d, energy %2.3f",rp->GetAbsId(0), amp));
     
     TVector3 lpos;
@@ -622,10 +577,15 @@ void AliEveEMCALData::LoadRecPointsFromEMCALLoader(AliEMCALLoader* const emcl)
     
     fSM[iSupMod]->RegisterCluster(iSupMod,amp,lpos[0],lpos[1],lpos[2]);
   }
+  
+  fRunLoader->UnloadRecPoints("EMCAL");
+  
+  AliDebug(1,"RecPoints loop done");    
 }
 
 ///
-/// Get cluster information from esd
+/// Get cluster information from ESDs.
+/// To be improved!!!, size and shape of cluster to be implemented.
 ///
 //______________________________________________________________________________
 void AliEveEMCALData::LoadRecPointsFromESD()
@@ -677,6 +637,8 @@ void AliEveEMCALData::LoadRecPointsFromESD()
     
     GetGeomInfo(clusId,iSupMod,x,y,z);
     
+    if(iSupMod >= fNsm ) continue ;
+    
 //    //******** Not used yet but will come  ********
 //    // AliESDCaloCells &cells= *(fESD->GetEMCALCells());
 //    Int_t     digMult = clus->GetNCells() ;
@@ -689,16 +651,11 @@ void AliEveEMCALData::LoadRecPointsFromESD()
 //      //*********************************************
   
     fSM[iSupMod]->RegisterCluster(iSupMod,energy,x,y,z);
-    
-    //      if     ( iSupMod < 10 ) fSMfull [iSupMod]   ->RegisterCluster(iSupMod,energy,x,y,z);
-    //      else if( iSupMod < 12 ) fSMhalf [iSupMod-10]->RegisterCluster(iSupMod,energy,x,y,z);
-    //      else if( iSupMod < 18 ) fSMfullD[iSupMod-12]->RegisterCluster(iSupMod,energy,x,y,z);
-    //      else if( iSupMod < 20 ) fSMhalfD[iSupMod-18]->RegisterCluster(iSupMod,energy,x,y,z);
   } // end cluster loop
 }
 
 ///
-/// Return super module data
+/// Return super module data.
 ///
 //______________________________________________________________________________
 AliEveEMCALSModuleData* AliEveEMCALData::GetSModuleData(Int_t sm)
@@ -712,13 +669,3 @@ AliEveEMCALSModuleData* AliEveEMCALData::GetSModuleData(Int_t sm)
   return fSM[sm];
 }
 
-///
-/// Get raw information
-///
-/// To be implemented !
-//
-//______________________________________________________________________________
-void AliEveEMCALData::LoadRaw() const
-{
-}
-
diff --git a/EVE/EveDet/AliEveEMCALData.h b/EVE/EveDet/AliEveEMCALData.h
index 6a93081..c900439 100644
--- a/EVE/EveDet/AliEveEMCALData.h
+++ b/EVE/EveDet/AliEveEMCALData.h
@@ -4,12 +4,14 @@
 /* Copyright(c) 1998-1999, ALICE Experiment at CERN, All rights reserved. *
  * See cxx source for full Copyright notice                               */
 
+///
 /// \class AliEveEMCALData
 /// \brief EMCal event display data handling
 ///
 /// Fill containers for visualisation of EMCAL data structures
-/// * read and store MC Hits    - read and store digits from esds or runloader
-/// * read and store clusters from esds or runloader 
+/// * read and store MC Hits information (AliEMCALHit) 
+/// * read and store digits from ESDs (CaloCells) or AliRunLoader (AliEMCALDigit).
+/// * read and store clusters from ESDs (CaloClusters) or AliRunLoader (AliEMCALRecPoint).
 ///
 /// \author Magali Estienne <magali.estienne@cern.ch>, SUBATECH. EMCal implementation, June 2008
 /// \author Gustavo Conesa Balbastre <Gustavo.Conesa.Balbastre@cern.ch>, LPSC-IN2P3-CNRS. DCal implementation + doxygen, May 2015.
@@ -27,70 +29,63 @@
 
 class map;
 class TTree;
-class AliRun;
-class AliRunLoader;
-class AliEMCAL;
-class AliEMCALLoader;
-class AliEMCALGeometry;
-class AliEveEMCALSModuleData;
 class TClonesArray; 
 class TGedFrame; 
 class TEveBoxSet; 
 class TEveUtil; 
 class TLorentzVector;
 
+class AliRunLoader;
+
+class AliEMCALGeometry;
+class AliEveEMCALSModuleData;
+
 class AliEveEMCALData : public TObject, public TEveRefCnt
 {
  public:
   
   AliEveEMCALData();
-  AliEveEMCALData(AliRunLoader* rl, TGeoNode* node, TGeoHMatrix* m);
+  AliEveEMCALData(AliRunLoader* rl, TGeoNode* node);//, TGeoHMatrix* m);
   ~AliEveEMCALData();
 
-  void SetTree(TTree* const tree);
-  void SetESD(AliESDEvent* const esd);
-  void SetNode(TGeoNode* const node);
-  void InitEMCALGeom(AliRunLoader* const rl);
+  void SetESD (AliESDEvent* esd)  { fESD  = esd  ; }
+  void SetNode(TGeoNode *  node)  { fNode = node ; }
+  
+  void InitEMCALGeom();
   void GetGeomInfo(Int_t id, Int_t &iSupMod, Double_t& x, Double_t& y, Double_t& z);
 
   void CreateAllSModules();
-  void CreateSModule(Int_t sm);
-  void DropAllSModules();
   void DeleteSuperModules();
 
-  void LoadHits(TTree* const t);
-  void LoadDigits(TTree* t);
-  void LoadRecPoints(TTree* const t);
-  void LoadHitsFromEMCALLoader(AliEMCALLoader* const emcl);
-  void LoadDigitsFromEMCALLoader(AliEMCALLoader* const emcl);
-  void LoadRecPointsFromEMCALLoader(AliEMCALLoader* const emcl);
+  void LoadHits();
+  void LoadDigits();
+  void LoadRecPoints();
+  
+  void LoadHitsFromEMCALLoader();
+  void LoadDigitsFromEMCALLoader();
+  void LoadRecPointsFromEMCALLoader();
+  
   void LoadDigitsFromESD();
   void LoadRecPointsFromESD();
-  void LoadRaw() const;
+  
+  /// Not implemented
+  void LoadRaw() const { ; } 
 
   AliEveEMCALSModuleData* GetSModuleData(Int_t sm);
-  TEvePointSet*           GetPointSetData() const {return fPoint;};
+  //  TEvePointSet*           GetPointSetData() const { return fPoint ; }
 
  protected:
   
-  AliEMCAL*         fEmcal;     ///< EMCal data member.
   AliEMCALGeometry* fGeom;      ///< Data member to set/call EMCAL geometry.
   TGeoNode*         fNode;      ///< Node for bbox definition.
-  TGeoHMatrix*      fHMatrix;   ///< Matrix for local to global transformation.
-  TTree*            fTree;      ///< Data Tree.
+//  TGeoHMatrix*      fHMatrix;   ///< Matrix for local to global transformation.
   AliESDEvent*      fESD;       ///< ESD event.
-  
+  AliRunLoader*     fRunLoader; ///< run loader
   Int_t             fNsm;       ///< Total number of Super Modules, EMCal+DCal.
 
-  std::vector<AliEveEMCALSModuleData*>   fSM;       ///< Vector of fNsm SModules.
-  std::vector<AliEveEMCALSModuleData*>   fSMfull;   ///< Vector of fNsmfull SModules.
-  std::vector<AliEveEMCALSModuleData*>   fSMhalf;   ///< Vector of fNhalf SModules.
-  std::vector<AliEveEMCALSModuleData*>   fSMfullD;  ///< Vector of fNsmfullD SModules.
-  std::vector<AliEveEMCALSModuleData*>   fSMhalfD;  ///< Vector of fNhalfD SModules.
-  
-  AliRunLoader*     fRunLoader; ///< Run Loader.
-  Int_t             fDebug;     ///< Debug option.
-  TEvePointSet*     fPoint;     ///< TEvePointSet for hits.
+  std::vector<AliEveEMCALSModuleData*>   fSM;  ///< Vector of fNsm SModules.
+
+  //  TEvePointSet*     fPoint;     ///< TEvePointSet for hits.
 
   // Temporary data members
   TLorentzVector    fClusterMom ; ///< Cluster momentum
@@ -100,7 +95,7 @@ class AliEveEMCALData : public TObject, public TEveRefCnt
   AliEveEMCALData           (const AliEveEMCALData &edata);  
   
   /// Assignment operator not implemented.
-  AliEveEMCALData& operator=(const AliEveEMCALData &edata); // Not implemented
+  AliEveEMCALData& operator=(const AliEveEMCALData &edata); 
 
   /// \cond CLASSIMP
   ClassDef(AliEveEMCALData, 2) ; 
-- 
1.9.5 (Apple Git-50.3)


From 25738e6925fc24c7821d7e18b3988a9f645dd378 Mon Sep 17 00:00:00 2001
From: gconesab <gustavo.conesa.balbastre@cern.ch>
Date: Fri, 8 May 2015 12:02:16 +0200
Subject: [PATCH 4/7] update comment

---
 EVE/alice-macros/emcal_hits.C | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/EVE/alice-macros/emcal_hits.C b/EVE/alice-macros/emcal_hits.C
index 1f912f9..2b492a3 100644
--- a/EVE/alice-macros/emcal_hits.C
+++ b/EVE/alice-macros/emcal_hits.C
@@ -10,7 +10,7 @@
 /// \file emcal_hits.C
 /// \brief Visualize EMCAL digits
 ///
-/// A macro to read and visualize EMCAL digits
+/// A macro to read and visualize EMCAL hits. Standalone.
 ///
 /// \author Magali Estienne <magali.estienne@cern.ch>, SUBATECH. EMCal implementation, June 2008
 //************************************************************************
-- 
1.9.5 (Apple Git-50.3)


From 9a18adecc932d031cdf92c324841e54916480111 Mon Sep 17 00:00:00 2001
From: gconesab <gustavo.conesa.balbastre@cern.ch>
Date: Fri, 8 May 2015 12:02:50 +0200
Subject: [PATCH 5/7] add more comments

---
 EVE/alice-macros/emcal_digits.C | 50 ++++++++++++++++++++++++++++++++---------
 1 file changed, 40 insertions(+), 10 deletions(-)

diff --git a/EVE/alice-macros/emcal_digits.C b/EVE/alice-macros/emcal_digits.C
index ed255f4..41929a0 100644
--- a/EVE/alice-macros/emcal_digits.C
+++ b/EVE/alice-macros/emcal_digits.C
@@ -10,7 +10,13 @@
 /// \file emcal_digits.C
 /// \brief Visualize EMCAL digits
 ///
-/// A macro to read and visualize EMCAL digits
+/// A macro to read and visualize EMCAL digits. 
+/// Standalone, it does not used the goodies of the classes AliEveEMCALXXX.
+/// It could be used as a simple testing tool for further development in the classes.
+///
+/// Include it in the macro visscan_init.C in this way:
+/// exec->AddMacro(new AliEveMacro(AliEveMacro::kRunLoader, "EMCAL DIGITS", "emcal_digits.C", "emcal_digits","",kTRUE));
+/// (the last parameter of the visscan_init macro indicates that this line is active or not).
 ///
 /// \author Magali Estienne <magali.estienne@cern.ch>, SUBATECH. EMCal implementation, June 2008
 /// \author Gustavo Conesa Balbastre <Gustavo.Conesa.Balbastre@cern.ch>, LPSC-IN2P3-CNRS. DCal implementation + doxygen, May 2015.
@@ -47,6 +53,10 @@ void emcal_digits()
   TGeoNode* node = gGeoManager->GetTopVolume()->FindNode("XEN1_1");
   if (!node) return;
   
+  Int_t nModules = node->GetNdaughters();
+
+  // Get the EMCAL geometry
+  //
   AliEMCALGeometry * geom  = AliEMCALGeometry::GetInstance();  
   if (!geom) 
   {
@@ -54,16 +64,15 @@ void emcal_digits()
     geom  = AliEMCALGeometry::GetInstance("EMCAL_COMPLETE12SMV1_DCAL_8SM");
   }
     
-  Int_t nModules = node->GetNdaughters();
-
+  // Check that the EMCAL geo and the nodes from EMCAL have the same number of entries
+  //
   if(nModules != geom->GetNumberOfSuperModules())
     printf("*** === EMCAL DIGITS - N Daughter Nodes %d - N super mod %d === ***\n", 
            node->GetNdaughters(), geom->GetNumberOfSuperModules());
-  
-  TEveElementList* l = new TEveElementList("EMCAL");
-  l->SetTitle("Tooltip");
-  gEve->AddElement(l);
-  
+    
+  // Get the EMCAL bounding boxes for the super modules.
+  // 4 kind of SM: 10 Full EMCal, 2 1/3 EMCal, 6 DCal (2/3 EMCal) and 2 1/3 EMCal in DCal region.
+  //
   TGeoBBox* bbbox = (TGeoBBox*) node->GetDaughter(0) ->GetVolume()->GetShape();
   TEveFrameBox* frame_big = new TEveFrameBox();
   frame_big->SetFrameColorRGBA(200,200,0,50);
@@ -93,12 +102,21 @@ void emcal_digits()
     frame_smld->SetFrameColorRGBA(200,200,0,50);
     frame_smld->SetAABoxCenterHalfSize(0, 0, 0, sdbbox->GetDX(), sdbbox->GetDY(), sdbbox->GetDZ());
   }
-
   
+  // Define EVE stuff
+  //
+  TEveElementList* l = new TEveElementList("EMCAL");
+  l->SetTitle("Tooltip");
+  gEve->AddElement(l);
+
   gStyle->SetPalette(1, 0);
   TEveRGBAPalette* pal = new TEveRGBAPalette(0, 512);
   pal->SetLimits(0, 1024);
 
+  // Here we will store the EMCAL data that will be treated by EVE
+  // per each super-module.
+  // Pass the SM bounding boxes (frames).
+  //
   const Int_t nSM = nModules;
   TEveQuadSet* smodules[nSM];
   memset(smodules,0,nModules*sizeof(TEveQuadSet*));
@@ -107,6 +125,8 @@ void emcal_digits()
   {
     TEveQuadSet* q = new TEveQuadSet(Form("SM %d", sm+1));
     q->SetOwnIds(kTRUE);
+    
+    // Type of object to be displayed, rectangle with cell size
     q->Reset(TEveQuadSet::kQT_RectangleYZFixedDimX, kFALSE, 32);
     q->SetDefWidth (geom->GetPhiTileSize());
     q->SetDefHeight(geom->GetEtaTileSize());
@@ -124,10 +144,15 @@ void emcal_digits()
     smodules[sm] = q;
   }
 
+  // EMCAL data reading
+  
   AliRunLoader* rl =  AliEveEventManager::AssertRunLoader();
   
+  // Get the list of digits
   rl->LoadDigits("EMCAL");
   TTree* dt = rl->GetTreeD("EMCAL", kFALSE);
+  printf("Dig: Tree dt %p\n",dt);
+
   if (!dt) return;
   
   TClonesArray *digits = 0;
@@ -136,6 +161,8 @@ void emcal_digits()
   Int_t nEnt = digits->GetEntriesFast();
   AliEMCALDigit * dig;
 
+  //printf("Dig: entries %d\n",nEnt);
+  
   Float_t amp   = -1 ;
   Float_t time  = -1 ;
   Int_t id      = -1 ;
@@ -147,6 +174,7 @@ void emcal_digits()
   Int_t ieta    =  0 ;
   Double_t x, y, z;
   
+  // Loop over the digits
   for (Int_t idig = 0; idig < nEnt; ++idig)
   {
     dig = static_cast<AliEMCALDigit *>(digits->At(idig));
@@ -158,7 +186,7 @@ void emcal_digits()
     time = dig->GetTime();//time of creation of digit after collision
     
     // Do not add too low ADC values (3 times pedestal)
-    if(amp < 3) continue;
+    if(amp <= 3) continue;
     
     //printf("\t Digit %d/%d: Cell ID %d; Amp %f; time %2.3e\n",idig+1,nEnt,id,amp,time);
     
@@ -177,6 +205,7 @@ void emcal_digits()
     // correct one.
     if(iSupMod >= nModules) continue;
     
+    // Push the data to the visualization tools
     TEveQuadSet* q = smodules[iSupMod];
     if (q) 
     {
@@ -188,6 +217,7 @@ void emcal_digits()
 
   rl->UnloadDigits("EMCAL");
   
+  // Send the data to EVE?
   for (Int_t sm = 0; sm < nModules; ++sm)
   {
     smodules[sm]->RefitPlex();
-- 
1.9.5 (Apple Git-50.3)


From 665fbef571d9792acb8c561575ad5837a75ce20b Mon Sep 17 00:00:00 2001
From: gconesab <gustavo.conesa.balbastre@cern.ch>
Date: Fri, 8 May 2015 12:04:00 +0200
Subject: [PATCH 6/7] add more comments, follow the changes applied to classes
 AliEveEMCALData and AliEveEMCALSModules

---
 EVE/alice-macros/emcal_all.C | 195 +++++++++++++++++++++++++------------------
 1 file changed, 114 insertions(+), 81 deletions(-)

diff --git a/EVE/alice-macros/emcal_all.C b/EVE/alice-macros/emcal_all.C
index 8ee14e9..55c3a2a 100644
--- a/EVE/alice-macros/emcal_all.C
+++ b/EVE/alice-macros/emcal_all.C
@@ -9,22 +9,35 @@
 /// \file emcal_all.C
 /// \brief Visualize EMCAL data
 ///
-/// A macro to read and visualize EMCAL data
-/// The macro: 
+/// A macro to read and visualize EMCAL data in different formats with the help of
+/// the classes managing the EMCAL data visulization:
+/// * AliEveEMCALData, 
+/// * AliEveEMCALSModule,
+/// * AliEveEMCALSModuleData.
+///  
+/// This macro: 
 /// * can read hits, digits and clusters information from AliRunLoader:
-///     * emcal_data->LoadHits(ht); 
-///     * emcal_data->LoadDigits(dt);
-///     * emcal_data->LoadRecPoints(rt);
-/// * can read hits, digits and clusters information from AliEMCALLoader:
-///     * rl->GetEvent(evtNum);
-///     * emcal_data->LoadHitsFromEMCALLoader(emcl);       // Does not work
-///     * emcal_data->LoadDigitsFromEMCALLoader(emcl);     
-///      emcal_data->LoadRecPointsFromEMCALLoader(emcl); 
-/// * can read hits, digits and clusters information from ESDs
+///     * emcal_data->LoadHits(); 
+///     * emcal_data->LoadDigits();
+///     * emcal_data->LoadRecPoints();
+///     * Same methods with the AliEMCALLoader implemented in the class AliEveEMCALData, (emcal_data->Load(DataType)FromEMCALLoader()) but it does not work.
+/// * can read hits (note tested in May 2015 implementation), digits and clusters information from ESDs (easily extendable to AODs, but not implemented)
 ///     * emcal_data->LoadDigitsFromESD();
 ///     * emcal_data->LoadClustersFromESD();
-/// * will read hits, digits and clusters information from raw
-///     * To be implemented
+/// * raw data not implemented
+///
+/// \param iLoader: Bool, do the analysis of reconstructed real/simulated data (not working online for the moment)
+/// \param iESD: Bool, do the analysis of reconstructed data from ESDs
+/// \param iHits: Bool, do the analysis of the generated hits from simulation, iLoader must be on
+/// \param iDigits: Bool, do the analysis of digits or ESD Cells (depends on iLoader and iESD setting)
+/// \param iClusters: Bool, do the analysis of reconstructed clusters, RecPoints or ESD CaloClusters (depends on iLoader and iESD setting)
+///
+/// Include it in the macro visscan_init.C in this way, for the different cases:
+///   * exec->AddMacro(new AliEveMacro(AliEveMacro::kRunLoader, "EMCAL DIGITS", "emcal_all.C", "emcal_all","1,0,0,1,0",kTRUE));
+///   * exec->AddMacro(new AliEveMacro(AliEveMacro::kRunLoader, "EMCAL REC POINTS", "emcal_all.C", "emcal_all","1,0,0,0,1",kTRUE));
+///   * exec->AddMacro(new AliEveMacro(AliEveMacro::kESD, "EMCAL ESD CELLS/DIGITS", "emcal_all.C", "emcal_all","0,1,0,1,0",kTRUE));
+///   * exec->AddMacro(new AliEveMacro(AliEveMacro::kESD, "EMCAL ESD CLUSTERS", "emcal_all.C", "emcal_all","0,1,0,0,1",kTRUE));
+/// (the last parameter of the visscan_init macro indicates that this line is active or not).
 ///
 /// \author Magali Estienne <magali.estienne@cern.ch>, SUBATECH. EMCal implementation, June 2008
 /// \author Gustavo Conesa Balbastre <Gustavo.Conesa.Balbastre@cern.ch>, LPSC-IN2P3-CNRS. DCal implementation + doxygen, May 2015.
@@ -53,95 +66,96 @@
 #include <AliEveMultiView.h>
 #include <AliEveEMCALData.h>
 #include <AliEveEMCALSModule.h>
+
 #else
 class AliEveEMCALData;
 #endif
 
 AliEveEMCALData * emcal_data = 0;
 
-void emcal_all(const UInt_t evtNum = 0)/*, Bool_t digFile = 0, 
-                                        const UInt_t eventsToProcess = 5, TString dirName = "./", 
-                                        const TString esdTreeName = "esdTree", const char *  pattern = ".")*/
+void emcal_all
+(  
+ Bool_t iLoader    = 1,
+ Bool_t iESD       = 0,
+ Bool_t iHits      = 0,
+ Bool_t iDigits    = 1,
+ Bool_t iClusters  = 0
+ )
 {
-  Int_t iLoader             = 1;
-  Int_t iESD                = 1;
-  Int_t iHits               = 1;
-  Int_t iDigits             = 1;
-  Int_t iClusters           = 1;
-  
-  AliRunLoader* rl =  AliEveEventManager::AssertRunLoader();
-  // runloader check already in AssertRunLoader function 
-  
-  AliESDEvent* esd = 0x0;
-  if(iESD) esd = AliEveEventManager::AssertESD();
-  // esd check already in AssertESD function 
-  
-  AliEMCALLoader *emcl = dynamic_cast<AliEMCALLoader*> (rl->GetDetectorLoader("EMCAL"));
-  
-  Int_t evtID = AliEveEventManager::GetMaster()->GetEventId();
-  if(evtID != (Int_t)evtNum) AliEveEventManager::GetMaster()->GotoEvent(evtNum);
-  
-  TTree* ht = 0x0; 
-  TTree* dt = 0x0; 
-  TTree* rt = 0x0; 
+ 
+//  printf("------------------------------------------------------------------------------------\n");
+//  printf("emcal_all.C - Selected options: Loaders %d, ESDs %d; Hits %d, Digits %d, Clusters %d\n",iLoader,iESD,iHits,iDigits,iClusters);
+//  printf("------------------------------------------------------------------------------------\n");
+  
+  //
+  // Get the data mangers, AliRunLoader or AliESDEvent and geometry.
+  //
+  AliRunLoader   * rl   = 0x0;
   if(iLoader)
   {
-    // Load Hits
-    if(iHits) 
-    {
-      if(!rl->LoadHits("EMCAL"))
-        ht = rl->GetTreeH("EMCAL",false);
-      else {printf("Please make sure a have a EMCal.Hits.root file \n"); return;}
-    }
-    
-    // Load Digits
-    if(iDigits) 
-    {
-      if(!rl->LoadDigits("EMCAL"))
-        dt = rl->GetTreeD("EMCAL",false);
-      else {printf("Please make sure a have a EMCal.Digits.root file \n"); return;}
-    }
-    
-    // Load RecPoints
-    if(iClusters) 
-    {
-      if(!rl->LoadRecPoints("EMCAL"))
-        rt = rl->GetTreeR("EMCAL",false);
-      else {printf("Please make sure a have a EMCal.RecPoints.root file \n"); return;}
-    }
+    rl   = AliEveEventManager::AssertRunLoader();
+    // runloader check already in AssertRunLoader function 
+
+    //   Int_t evtID = AliEveEventManager::GetMaster()->GetEventId();
+    //   rl->GetEvent(evtID);
   }
   
+  AliESDEvent* esd = 0x0;
+  if(iESD) esd = AliEveEventManager::AssertESD();
+  // esd check already in AssertESD function 
+      
   //  gGeoManager = gEve->GetDefaultGeometry();
   AliEveEventManager::AssertGeometry();
   
   TGeoNode* node = gGeoManager->GetTopVolume()->FindNode("XEN1_1");
-  TGeoHMatrix* m = gGeoManager->GetCurrentMatrix();
+  //TGeoHMatrix* m = gGeoManager->GetCurrentMatrix();
   
-  emcal_data = new AliEveEMCALData(rl,node,m);
-  if(iESD) emcal_data->SetESD(esd);
+  //printf("*** nodes %d\n",node->GetNdaughters());
+  
+  //
+  // Initialize the EMCAL data manager
+  //
+  emcal_data = new AliEveEMCALData(rl,node);//,m);
   
-  // Get information from RunLoader
+  //printf("*** AliEveEMCALData %p\n",emcal_data);
+  
+  if(iESD) emcal_data->SetESD(esd);
+
+  //printf("*** AliEveEMCALData set ESD\n");
+
+  //
+  // Get the EMCAL information from RunLoader
+  //
   if(iLoader)
   {
-    if(iHits)     emcal_data->LoadHits(ht); // Does not work with my aliroot version 
-    if(iDigits)   emcal_data->LoadDigits(dt);
-    if(iClusters) emcal_data->LoadRecPoints(rt);
-    
-    rl->GetEvent(evtNum);
-    
-    if(iHits)     emcal_data->LoadHitsFromEMCALLoader(emcl);       
-    if(iDigits)   emcal_data->LoadDigitsFromEMCALLoader(emcl);     
-    if(iClusters) emcal_data->LoadRecPointsFromEMCALLoader(emcl); 
+    //printf("*** Execute Loader methods \n");
+
+    if ( iHits    ) emcal_data->LoadHits(); 
+
+    if ( iDigits  ) emcal_data->LoadDigits();
+
+    if ( iClusters) emcal_data->LoadRecPoints();
   }
   
-  // Get information from ESDs
+  //
+  // Get the EMCAL information from ESDs
+  //
   if(iESD)
   {
-    rl->GetEvent(evtNum);
+    //if(iLoader) rl ->GetEvent(evtNum);
+
+    //printf("*** Execute ESD methods \n");
+    
     if(iDigits)   emcal_data->LoadDigitsFromESD();
+    
     if(iClusters) emcal_data->LoadRecPointsFromESD();
   }
   
+  //printf("*** Data reading executed\n");
+
+  //
+  // EVE stuff
+  //
   gStyle->SetPalette(1, 0);
   
   gEve->DisableRedraw();
@@ -151,15 +165,34 @@ void emcal_all(const UInt_t evtNum = 0)/*, Bool_t digFile = 0,
   l->SetMainColor(Color_t(2));
   gEve->AddElement(l);
   
-  for (Int_t sm = 0; sm < 20; sm++)
+  //printf("*** Loop SM data, push data \n");
+
+  //
+  // Pass the recovered EMCAL data per super-module to EVE
+  //
+  for (Int_t sm = 0; sm < node->GetNdaughters(); sm++)
   {
-    AliEveEMCALSModule* esm = new AliEveEMCALSModule(sm,Form("SM %d Element \n", sm),"test");
-    //      esm->SetSModuleID(sm);
+    AliEveEMCALSModule* esm = new AliEveEMCALSModule(sm,Form("SM %d Element \n", sm),"EveEMCAL");
+    // When/where is this created object cleaned?
+    
     esm->SetDataSource(emcal_data);
-    esm->UpdateQuads();
-    l->AddElement(esm);
+    
+    esm->UpdateQuads(iHits, iDigits, iClusters);
+    
+    //l->AddElement(esm); // comment, it crashes, replace by:
+    
+    if ( iDigits   ) gEve->AddElement(esm->GetDigitQuadSet()  , l);
+    
+    if ( iClusters ) gEve->AddElement(esm->GetClusterQuadSet(), l);
+    
+    if ( iHits )     gEve->AddElement(esm->GetHitPointSet()   , l);
+    
+    esm->DropData(); // Not sure it is needed, it works locally with it, but better clean the arrays.    
   }
-  
+
+  //
+  // Draw
+  //
   gEve->Redraw3D(kTRUE);
   
   gEve->EnableRedraw();
-- 
1.9.5 (Apple Git-50.3)


From 0b61e8eb94b21c17a79bcb8849ffff598bb003e6 Mon Sep 17 00:00:00 2001
From: gconesab <gustavo.conesa.balbastre@cern.ch>
Date: Fri, 8 May 2015 12:36:15 +0200
Subject: [PATCH 7/7] standalone macro to plot EMCAL ESD calo cells

---
 EVE/alice-macros/emcal_esdcells.C | 215 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 215 insertions(+)
 create mode 100644 EVE/alice-macros/emcal_esdcells.C

diff --git a/EVE/alice-macros/emcal_esdcells.C b/EVE/alice-macros/emcal_esdcells.C
new file mode 100644
index 0000000..bc75d84
--- /dev/null
+++ b/EVE/alice-macros/emcal_esdcells.C
@@ -0,0 +1,215 @@
+
+/**************************************************************************
+ * Copyright(c) 1998-2008, ALICE Experiment at CERN, all rights reserved. *
+ * See http://aliceinfo.cern.ch/Offline/AliRoot/License.html for          *
+ * full copyright notice.                                                 *
+ **************************************************************************/
+
+//************************************************************************
+///
+/// \file emcal_esdcells.C
+/// \brief Visualize EMCAL ESD cells
+///
+/// A macro to read and visualize EMCAL digits. 
+/// Standalone, it does not used the goodies of the classes AliEveEMCALXXX.
+/// It could be used as a simple testing tool for further development in the classes.
+///
+/// Include it in the macro visscan_init.C in this way:
+/// exec->AddMacro(new AliEveMacro(AliEveMacro::kESD, "EMCAL ESD CELLS", "emcal_esdcells.C", "emcal_esdcells","",kTRUE));
+/// (the last parameter of the visscan_init macro indicates that this line is active or not).
+///
+/// \author Gustavo Conesa Balbastre <Gustavo.Conesa.Balbastre@cern.ch>, LPSC-IN2P3-CNRS. DCal implementation + doxygen, May 2015.
+//************************************************************************
+
+
+#ifndef __CINT__
+
+#include <TEveManager.h>
+#include <TEveQuadSet.h>
+#include <TGeoNode.h>
+#include <TGeoBBox.h>
+#include <TGeoManager.h>
+#include <TStyle.h>
+#include <TEveTrans.h>
+#include <TClonesArray.h>
+#include <TTree.h>
+#include <TBranch.h>
+
+#include <EveBase/AliEveEventManager.h>
+
+#include <AliRunLoader.h>
+#include <AliCluster.h>
+#include <AliEMCALGeometry.h>
+#include <AliEMCALDigit.h>
+#include <AliLog.h>
+
+#endif
+
+void emcal_esdcells()
+{  
+  AliEveEventManager::AssertGeometry();
+  
+  TGeoNode* node = gGeoManager->GetTopVolume()->FindNode("XEN1_1");
+  if (!node) return;
+  
+  Int_t nModules = node->GetNdaughters();
+
+  // Get the EMCAL geometry
+  //
+  AliEMCALGeometry * geom  = AliEMCALGeometry::GetInstance();  
+  if (!geom) 
+  {
+    printf("xxx Set default geo as Run2 xxx\n");
+    geom  = AliEMCALGeometry::GetInstance("EMCAL_COMPLETE12SMV1_DCAL_8SM");
+  }
+    
+  // Check that the EMCAL geo and the nodes from EMCAL have the same number of entries
+  //
+  if(nModules != geom->GetNumberOfSuperModules())
+    printf("*** === EMCAL DIGITS - N Daughter Nodes %d - N super mod %d === ***\n", 
+           node->GetNdaughters(), geom->GetNumberOfSuperModules());
+    
+  // Get the EMCAL bounding boxes for the super modules.
+  // 4 kind of SM: 10 Full EMCal, 2 1/3 EMCal, 6 DCal (2/3 EMCal) and 2 1/3 EMCal in DCal region.
+  //
+  TGeoBBox* bbbox = (TGeoBBox*) node->GetDaughter(0) ->GetVolume()->GetShape();
+  TEveFrameBox* frame_big = new TEveFrameBox();
+  frame_big->SetFrameColorRGBA(200,200,0,50);
+  frame_big->SetAABoxCenterHalfSize(0, 0, 0, bbbox->GetDX(), bbbox->GetDY(), bbbox->GetDZ());
+  
+  TEveFrameBox* frame_sml  = 0x0;
+  TEveFrameBox* frame_dcl  = 0x0;
+  TEveFrameBox* frame_smld = 0x0;
+
+  if (nModules > 10) 
+  {
+    TGeoBBox* sbbox = (TGeoBBox*) node->GetDaughter(10)->GetVolume()->GetShape();
+    frame_sml = new TEveFrameBox();
+    frame_sml->SetFrameColorRGBA(200,200,0,50);
+    frame_sml->SetAABoxCenterHalfSize(0, 0, 0, sbbox->GetDX(), sbbox->GetDY(), sbbox->GetDZ());
+  }
+
+  if (nModules > 12) 
+  {
+    TGeoBBox* dbbox = (TGeoBBox*) node->GetDaughter(12)->GetVolume()->GetShape();
+    frame_dcl = new TEveFrameBox();
+    frame_dcl->SetFrameColorRGBA(200,200,0,50);
+    frame_dcl->SetAABoxCenterHalfSize(0, 0, 0, dbbox->GetDX(), dbbox->GetDY(), dbbox->GetDZ());
+    
+    TGeoBBox* sdbbox = (TGeoBBox*) node->GetDaughter(18)->GetVolume()->GetShape();
+    frame_smld = new TEveFrameBox();
+    frame_smld->SetFrameColorRGBA(200,200,0,50);
+    frame_smld->SetAABoxCenterHalfSize(0, 0, 0, sdbbox->GetDX(), sdbbox->GetDY(), sdbbox->GetDZ());
+  }
+  
+  // Define EVE stuff
+  //
+  TEveElementList* l = new TEveElementList("EMCAL");
+  l->SetTitle("Tooltip");
+  gEve->AddElement(l);
+
+  gStyle->SetPalette(1, 0);
+  TEveRGBAPalette* pal = new TEveRGBAPalette(0, 512);
+  pal->SetLimits(0, 1024);
+
+  // Here we will store the EMCAL data that will be treated by EVE
+  // per each super-module.
+  // Pass the SM bounding boxes (frames).
+  //
+  const Int_t nSM = nModules;
+  TEveQuadSet* smodules[nSM];
+  memset(smodules,0,nModules*sizeof(TEveQuadSet*));
+  
+  for (Int_t sm = 0; sm < nModules; ++sm)
+  {
+    TEveQuadSet* q = new TEveQuadSet(Form("SM %d", sm+1));
+    q->SetOwnIds(kTRUE);
+    
+    // Type of object to be displayed, rectangle with cell size
+    q->Reset(TEveQuadSet::kQT_RectangleYZFixedDimX, kFALSE, 32);
+    q->SetDefWidth (geom->GetPhiTileSize());
+    q->SetDefHeight(geom->GetEtaTileSize());
+
+    q->RefMainTrans().SetFrom(*node->GetDaughter(sm)->GetMatrix());
+
+    if     (sm < 10) q->SetFrame(frame_big );
+    else if(sm < 12) q->SetFrame(frame_sml );
+    else if(sm < 18) q->SetFrame(frame_dcl );
+    else if(sm < 20) q->SetFrame(frame_smld);
+    
+    q->SetPalette(pal);
+
+    gEve->AddElement(q, l);
+    smodules[sm] = q;
+  }
+
+  // EMCAL data reading
+  
+  AliESDEvent* esd = AliEveEventManager::AssertESD();
+  
+  if(!esd)
+  {
+    printf("emcal_esdcells: ESD event not available\n");
+    return;
+  }
+  
+  AliESDCaloCells &cells= *(esd->GetEMCALCells());
+  
+  if(!esd->GetEMCALCells()) 
+  {
+    printf("emcal_esdcells: ESDCaloCells not available\n");
+    return;
+  }
+  
+  Int_t ncell = cells.GetNumberOfCells() ;  
+  
+  //printf("Number of ESD CaloCells %d\n",ncell);
+  
+  Int_t iSupMod =  0 ;
+  Double_t x, y, z;
+  Float_t amp   = -1 ;
+  Float_t time  = -1 ;
+  Int_t id      = -1 ;
+  Int_t iTower  =  0 ;
+  Int_t iIphi   =  0 ;
+  Int_t iIeta   =  0 ;
+  Int_t iphi    =  0 ;
+  Int_t ieta    =  0 ;
+
+  // Extract digit information from the ESDs
+  for (Int_t icell=  0; icell <  ncell; icell++) 
+  {
+    id  = cells.GetCellNumber(icell);
+    amp = cells.GetAmplitude (icell); // GeV
+    
+    //printf("CaloCell %d, ID %d, energy %2.3f\n",icell,id,amp);
+    
+     //Geometry methods
+    geom->GetCellIndex(id,iSupMod,iTower,iIphi,iIeta);
+    //Gives SuperModule and Tower numbers
+    geom->GetCellPhiEtaIndexInSModule(iSupMod,iTower,iIphi, iIeta,iphi,ieta);
+    //Gives label of cell in eta-phi position per each supermodule
+    
+    geom->RelPosCellInSModule(id, x, y, z);
+    
+    // It should not happen, but in case the OCDB file is not the
+    // correct one.
+    if(iSupMod >= nModules) continue;
+    
+    // Push the data to the visualization tools
+    TEveQuadSet* q = smodules[iSupMod];
+    if (q) 
+    {
+      q->AddQuad(y, z);
+      q->QuadValue(amp);
+    }
+  }
+    
+  // Send the data to EVE?
+  for (Int_t sm = 0; sm < nModules; ++sm)
+  {
+    smodules[sm]->RefitPlex();
+  }
+  
+  gEve->Redraw3D();
+}
-- 
1.9.5 (Apple Git-50.3)

