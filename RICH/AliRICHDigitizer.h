#ifndef ALIRICHDIGITIZER_H
#define ALIRICHDIGITIZER_H
/* Copyright(c) 1998-2000, ALICE Experiment at CERN, All rights reserved. *
 * See cxx source for full Copyright notice                               */

/* $Id$ */

#include "AliDigitizer.h"

class AliRunDigitizer;
class AliRICHSDigit;
class AliHitMap;

class AliRICHDigitizer : public AliDigitizer {
 public:
    
    AliRICHDigitizer();
    AliRICHDigitizer(AliRunDigitizer * manager);
    virtual ~AliRICHDigitizer();
    
    // Compare pad hits
    virtual Bool_t Exists(const AliRICHSDigit * sdigit);
    // Update a pad hit
    virtual  void Update(AliRICHSDigit *sdigit);
    // Create a new hit
    virtual  void CreateNew(AliRICHSDigit *sdigit);

    // Initialize merging and digitisation
    virtual Bool_t Init();

    // Do the main work
//    void Digitise(Int_t nev,Int_t flag) ;
    virtual void Exec(Option_t* option=0);
    Int_t GetDebug() {return fDebug;}             // get debug level
    void SetDebug(Int_t level){fDebug = level;}   // set debug level    
    enum {kBgTag = -1};

 private:
    TClonesArray *fHits;            //! List of hits for one track only
    TClonesArray *fSDigits;         //! List of clusters for one track only
    AliHitMap **fHitMap;            //! pointer to array of pointers to hitmaps
    Int_t fNch;                     //! chamber nr (loop variable)
    Int_t fTrack;                   //! track nr (loop variable)
//    Int_t fCharge;                  //! charge generated by fTrack
    TObjArray *fTDList;             //! list of AliRICHTransientDigit
    Int_t fCounter;                 //! nr. of AliRICHTransientDigit
    Bool_t fSignal;                 //! kTRUE if signal file is processed
    Int_t fMask;                    //! mask dependent on input file
    Int_t fDigits[5];               //! array with digits
    Int_t fDebug;                   //! debug level
    
    ClassDef(AliRICHDigitizer,1)
};    
#endif

