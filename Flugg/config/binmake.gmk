# $ Id: binmake.gmk,v 1.56.2.1 2001/03/22 13:54:24 gunter Exp $
# ----------------------------------------------------------
# Script defining rules and paths for making binaries.
#                          Gabriele Cosmo, 25/06/1998.
# ----------------------------------------------------------

ifndef LDFLAGS
  include $(FLUGGINSTALL)/config/architecture.gmk
endif

ifdef G4GEOMETRY_DEBUG
  CPPFLAGS += -DG4GEOMETRY_DEBUG
endif  

G4LIBDIR := $(G4LIB)/$(G4SYSTEM)
G4LIBDIR_G4 := $(G4LIB_G4)/$(G4SYSTEM)

ifndef INCFLAGS
  INCFLAGS := \
	      -I$(G4BASE_G4)/global/management/include \
	      -I$(G4BASE_G4)/global/STLInterface \
	      -I$(G4BASE_G4)/global/HEPRandom/include \
	      -I$(G4BASE_G4)/global/HEPGeometry/include \
	      -I$(G4BASE_G4)/global/HEPNumerics/include \
	      -I$(G4BASE_G4)/materials/include \
	      -I$(G4BASE_G4)/geometry/management/include \
	      -I$(G4BASE_G4)/geometry/solids/CSG/include \
	      -I$(G4BASE_G4)/geometry/solids/specific/include \
	      -I$(G4BASE_G4)/geometry/solids/BREPS/include \
	      -I$(G4BASE_G4)/geometry/solids/Boolean/include \
	      -I$(G4BASE_G4)/geometry/solids/STEP/include \
	      -I$(G4BASE_G4)/geometry/solids/STEPinterface/include \
	      -I$(G4BASE_G4)/geometry/volumes/include \
	      -I$(G4BASE_G4)/geometry/magneticfield/include \
	      -I$(G4BASE_G4)/graphics_reps/include \
	      -I$(G4BASE)/dummyG4/include \
	      -I$(G4BASE)/Wrappers/include
endif

ifndef G4LIB_USE_GRANULAR
    GLOBALLIBS := $(shell test -f $(G4LIB)/$(G4SYSTEM)/libG4global.a && echo yes)
  ifndef GLOBALLIBS
    GLOBALLIBS := $(shell test -f $(G4LIB)/$(G4SYSTEM)/libG4global.$(SHEXT) && echo yes)
    SHAREDLIBS := $(shell test -f $(G4LIB)/$(G4SYSTEM)/libG4global.$(SHEXT) && echo yes)
  endif
endif

ifndef SHAREDLIBS
  SHAREDLIBS := $(shell test -f $(G4LIB)/$(G4SYSTEM)/libG4globman.$(SHEXT) && echo yes)
endif
  
CPPFLAGS += $(INCFLAGS)
LDFLAGS += -L$(G4LIBDIR) -L$(G4LIBDIR_G4) -L$(CLHEP_LIB_DIR)

# Addded for FLUGG: fortan and fluka libraries path
LDFLAGS += -L$(FORLIB) -L/lib -L$(FLUKA)

G4TMPDIR := $(G4TMP)/$(G4SYSTEM)/$(G4TARGET)
G4BINDIR := $(G4BIN)/$(G4SYSTEM)

ifdef G4EXLIB
  G4LIBDIR := $(G4TMPDIR)
  LDFLAGS += -L$(G4LIBDIR)
  ifdef SHAREDLIBS
    ifdef G4RUNPATHOPTION
#        for the example dependant directory, keep the path to the shared lib 
#          in the executable.
      LDFLAGS += $(G4RUNPATHOPTION)$(G4LIBDIR)
    endif
  endif
  include $(FLUGGINSTALL)/config/common.gmk
endif

ifdef LDLIBS
  USER_DEFINED_LDLIBS := 1
endif

# Because of the script for granular libraries which replaces part of LDLIBS
# and because of the way user defined LDLIBS was augmented historically I
# have split LDLIBS into 4 parts...
#
ifndef USER_DEFINED_LDLIBS

# LDLIBS1 contains the very high level libraries...
#
ifdef G4EXLIB
  LDLIBS1 := -l$(G4TARGET)
endif
LDLIBS1 += $(EXTRALIBS)

# VISLIBS and UILIBS are now handled by the granular library script...
#
ifdef GLOBALLIBS
  LDLIBS1 += $(VISLIBS) $(UILIBS)
endif

ifdef GLOBALLIBS

  ifdef G4ODBMS
    LDLIBS1 += -lG4persistency
  endif
  
  LDLIBS2 := \
	     -lFggWrappers \ 
             -lG4geometry \
             -lG4materials \
             -lG4graphics_reps \
             -lG4intercoms \
	     -lG4dummy \
             -lG4global
else
  LDLIBS2 := \
	-lFggWrappers \
	-lG4geometrymng \
	-lG4volumes \
	-lG4csg \
	-lG4specsolids \
	-lG4geomBoolean \
	-lG4brep \
	-lG4step \
	-lG4stepinterface \
	-lG4magneticfield \
	-lG4materials \
	-lG4graphics_reps \
	-lG4intercoms \
	-lG4dummy \
	-lG4hepnumerics \
	-lG4globman
endif

# LDLIBS3 contains the first set of low level libraries...
#
LDLIBS3 += $(INTYLIBS)

endif # ifndef USER_DEFINED_LDLIBS

# LDLIBS4 contains the next set of low level libraries which historically
# (why?) the user is not supposed to be able to define...
#
ifdef G4USE_OSPACE
  LDLIBS4 += $(OSPACELIBS)
endif

LDLIBS4 += $(LOADLIBS)

# Finally assemble libraries...
#
ifdef USER_DEFINED_LDLIBS
  LDLIBS_PREFINAL := $(LDLIBS)
else
# Again, do not use := or +=.  See note on LDLIBS2 above.
  LDLIBS_PREFINAL = $(LDLIBS1) $(LDLIBS2) $(LDLIBS2EXTRA) $(LDLIBS3)
endif
LDLIBS_PREFINAL += $(LDLIBS4)

ifeq ($(G4SYSTEM),WIN32-VC)
  WIN32TMP := $(patsubst -L%,$(LIB_PATH)%,$(LDFLAGS))
  LDFLAGS  = $(patsubst /,$(PATH_DEL),$(WIN32TMP))
  LDLIBS = $(patsubst -l%,lib%.a,$(LDLIBS_PREFINAL))
else
  LDLIBS = $(LDLIBS_PREFINAL)
endif

# Addded for FLUGG: fortan and fluka libraries
LDLIBS += -lc
LDLIBS += -lflukahp
LDLIBS += -lg2c -lstdc++
#

ifdef transform-RPath
#invoke system specific transformation of 
include $(FLUGGINSTALL)/config/sys/$(G4SYSTEM)-runpath.gmk
endif
	
sources := $(wildcard $(G4TARGET).cc)
objects := $(patsubst %.cc,$(G4TMPDIR)/exe/%.o,$(sources))
dependencies := $(patsubst %.cc,$(G4TMPDIR)/exe/%.d,$(sources))

#
# extra fortran source files for FLUKA 
#
sources += $(wildcard for/*.f)
objects += $(patsubst for/%.f,$(G4TMPDIR)/exe/%.o,$(wildcard for/*.f))

$(G4TMPDIR)/exe/%.o: for/%.f
	@echo Compiling $*.f ...
	@$(FLUPRO)/flutil/fff for/$*.f
	@mv for/$*.o $(G4TMPDIR)/exe/$*.o

LINK_DEPENDENCIES := $(G4TMPDIR)/exe/obj.last $(EXTRA_LINK_DEPENDENCIES)

.PHONY: bin clean clean_bin debug

# Make $(G4TARGET) executable.
bin: $(G4BINDIR)/$(G4TARGET)

$(G4BINDIR)/$(G4TARGET): $(LINK_DEPENDENCIES)
ifndef USER_DEFINED_LDLIBS
  ifndef GLOBALLIBS
	@echo "Using granular libraries ..."
  else
	@echo "Using global libraries."
  endif
endif
	@if [ ! -d $(G4BINDIR) ] ; then mkdir $(G4BINDIR) ;fi
ifdef CPPVERBOSE
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) \
	  -o $(G4BINDIR)/$(G4TARGET) $(objects) $(LDFLAGS) \
	  $(LDLIBS)
else
	@echo Linking $(G4TARGET) ...
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) \
	  -o $(G4BINDIR)/$(G4TARGET) $(objects) $(LDFLAGS) \
	  $(LDLIBS)
endif

# Touch the versioning file
ifdef G4EXLIB
$(G4TMPDIR)/exe/obj.last: lib $(objects)
else
$(G4TMPDIR)/exe/obj.last: $(objects)
endif
	@touch $@

# Make the $(G4TARGET).o file.
$(G4TMPDIR)/exe/$(G4TARGET).o : $(G4TARGET).cc
ifdef CPPVERBOSE
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(APPFLAGS) \
	 -c $(OUT_OBJ)$(G4TMPDIR)/exe/$(G4TARGET).o $(G4TARGET).cc
else
	@echo Compiling $(G4TARGET).cc ...
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) $(APPFLAGS) \
	 -c $(OUT_OBJ)$(G4TMPDIR)/exe/$(G4TARGET).o $(G4TARGET).cc
endif

ifdef G4ODBMS
  GPPFLAGS := "-MM"
else
  GPPFLAGS := "-M"
endif

# Make the $(G4TARGET).d file and include it.
ifdef G4SKIP_DEPEND
$(G4TMPDIR)/exe/$(G4TARGET).d: $(G4TARGET).cc
	@echo Skip dependency file creation for file $< ...
else
$(G4TMPDIR)/exe/$(G4TARGET).d: $(G4TARGET).cc
	@if [ ! -d $(G4TMP)/$(G4SYSTEM) ] ; then mkdir $(G4TMP)/$(G4SYSTEM) ;fi
	@if [ ! -d $(G4TMPDIR) ] ; then mkdir $(G4TMPDIR) ;fi
	@if [ ! -d $(G4TMPDIR)/exe ] ; then mkdir $(G4TMPDIR)/exe ;fi
	@echo Making dependency for file $<...
	@($(ECHO) $(G4TMPDIR)/exe/\\c ; \
	g++ $(GPPFLAGS) $(CPPFLAGS) $< ) | sed 's!$(G4TMPDIR)/exe/$*.o!& $@!' >$@
-include $(dependencies)
endif

clean:
	@echo Cleaning up ...
	@rm -f ./core
	@rm -rf $(G4TMPDIR)
	@rm -f $(G4LIBDIR)/lib$(G4TARGET).a
	@rm -f $(G4BINDIR)/$(G4TARGET)
ifdef CFRONT
	@rm -rf $(G4TREP)/exec
endif

clean_bin:
	@echo Removing application $(G4TARGET) ...
	@rm -f ./core
	@rm -f $(G4BINDIR)/$(G4TARGET)

############################+ targets for G4ODBMS +############################
ifdef G4ODBMS

cleandb: clean newboot

newboot:
	@echo Copying schema file to $(G4EXAMPLE_BOOT) for FDID $(G4EXAMPLE_FDID)
	@rm -f $(G4EXAMPLE_BOOT_DIR)/$(name)
	@rm -f $(G4EXAMPLE_BOOT_DIR)/$(name).FDDB
	@rm -f $(G4EXAMPLE_BOOT_DIR)/*.$(name).DB
	@$(HEP_ODBMS_DIR)/etc/getdb $(G4SCHEMA_DIR)/G4SCHEMA \
	                            $(G4EXAMPLE_BOOT) $(G4SCHEMA_FDID)

newfd:
ifndef G4EXAMPLE_FDID
	@echo G4EXAMPLE_FDID is not defined.  Stop.
	exit 1
endif
	@echo Creating new runtime federated database $(G4EXAMPLE_BOOT) for FDID $(G4EXAMPLE_FDID)
	@rm -f $(G4EXAMPLE_FD_DIR)/$(name)
	@rm -f $(G4EXAMPLE_FD_DIR)/$(name).FDDB
	@rm -f $(G4EXAMPLE_FD_DIR)/*.$(name).DB
	@$(HEP_ODBMS_DIR)/etc/getdb $(G4EXAMPLE_BOOT) \
	                            $(G4EXAMPLE_FD) $(G4EXAMPLE_FDID)
endif
############################- targets for G4ODBMS -############################

